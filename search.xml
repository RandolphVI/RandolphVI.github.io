<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[「TensorFlow」 Use WeChat to Monitor Your Network]]></title>
    <url>%2F2017%2F03%2F13%2F%3CTensorflow%3E%20Use%20WeChat%20to%20Monitor%20Your%20Network%2F</url>
    <content type="text"><![CDATA[大概的效果是： 程序用到的主角是 Python 中的微信个人号接口 itchat。What’s itchat? （itchat 的介绍及安装过程） 这次，我们要监控的模型是先前提到过的 基于 MNIST 手写体数据集的「CNN」模型 。 注意： 文章要求读者事先下载安装好 itchat。 文章不会详细介绍 TensorFlow 以及 Tensorboard 的知识。 EnvironmentOS: macOS Sierra 10.12.x Python Version: 3.4.x TensorFlow: 1.0 itchat: 1.2.3 Code Use WeChat to Monitor Your Network（tensorboard 绘图） 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259# 基于 MNIST 数据集 的 「CNN」（tensorboard 绘图）from tensorflow.examples.tutorials.mnist import input_dataimport tensorflow as tfimport numpy as npimport scipy# Import itchat &amp; threadingimport itchatimport threading# Create a running status flaglock = threading.Lock()running = False# Parameterslearning_rate = 0.001training_iters = 200000batch_size = 128display_step = 10def weight_variable(shape): initial = tf.truncated_normal(shape, stddev = 0.1) return tf.Variable(initial) def bias_variable(shape): initial = tf.constant(0.1, shape = shape) return tf.Variable(initial)def conv2d(x, W, strides=1): return tf.nn.conv2d(x, W, strides=[1, strides, strides, 1], padding='SAME')def max_pool_2x2(x, k=2): return tf.nn.max_pool(x, ksize=[1, k, k, 1], strides=[1, k, k, 1], padding='SAME') def variable_summaries(var): """Attach a lot of summaries to a Tensor (for TensorBoard visualization).""" with tf.name_scope('summaries'): mean = tf.reduce_mean(var) tf.summary.scalar('mean', mean) with tf.name_scope('stddev'): stddev = tf.sqrt(tf.reduce_mean(tf.square(var - mean))) tf.summary.scalar('stddev', stddev) tf.summary.scalar('max', tf.reduce_max(var)) tf.summary.scalar('min', tf.reduce_min(var)) tf.summary.histogram('histogram', var)def add_layer(input_tensor, weights_shape, biases_shape, layer_name, act = tf.nn.relu, flag = 1): """Reusable code for making a simple neural net layer. It does a matrix multiply, bias add, and then uses relu to nonlinearize. It also sets up name scoping so that the resultant graph is easy to read, and adds a number of summary ops.""" with tf.name_scope(layer_name): with tf.name_scope('weights'): weights = weight_variable(weights_shape) variable_summaries(weights) with tf.name_scope('biases'): biases = bias_variable(biases_shape) variable_summaries(biases) with tf.name_scope('Wx_plus_b'): if flag == 1: preactivate = tf.add(conv2d(input_tensor, weights), biases) else: preactivate = tf.add(tf.matmul(input_tensor, weights), biases) tf.summary.histogram('pre_activations', preactivate) if act == None: outputs = preactivate else: outputs = act(preactivate, name = 'activation') tf.summary.histogram('activation', outputs) return outputsdef nn_train(wechat_name, param): global lock, running # Lock with lock: running = True # 参数 learning_rate, training_iters, batch_size, display_step = param # Import data mnist_data_path = 'MNIST_data/' mnist = input_data.read_data_sets(mnist_data_path, one_hot = True) # Network Parameters n_input = 28*28 # MNIST data input (img shape: 28*28) n_classes = 10 # MNIST total classes (0-9 digits) dropout = 0.75 # Dropout, probability to keep units with tf.name_scope('Input'): x = tf.placeholder(tf.float32, [None, n_input], name = 'input_x') y_ = tf.placeholder(tf.float32, [None, n_classes], name = 'target_y') keep_prob = tf.placeholder(tf.float32, name = 'keep_prob') #dropout (keep probability) def cnn_net(x, weights, biases, dropout): # Reshape input picture x_image = tf.reshape(x, [-1, 28, 28 ,1]) # First Convolutional Layer conv_1 = add_layer(x_image, weights['conv1_w'], biases['conv1_b'], 'First_Convolutional_Layer', flag = 1) # First Pooling Layer pool_1 = max_pool_2x2(conv_1) # Second Convolutional Layer conv_2 = add_layer(pool_1, weights['conv2_w'], biases['conv2_b'], 'Second_Convolutional_Layer', flag = 1) # Second Pooling Layer pool_2 = max_pool_2x2(conv_2) # Densely Connected Layer pool_2_flat = tf.reshape(pool_2, [-1, weight_variable(weights['dc1_w']).get_shape().as_list()[0]]) dc_1 = add_layer(pool_2_flat, weights['dc1_w'], biases['dc1_b'], 'Densely_Connected_Layer', flag = 0) # Dropout dc_1_drop = tf.nn.dropout(dc_1, keep_prob) # Readout Layer y = add_layer(dc_1_drop, weights['out_w'], biases['out_b'], 'Readout_Layer', flag = 0) return y # Store layers weight &amp; bias weights = &#123; # 5x5 conv, 1 input, 32 outputs 'conv1_w': [5, 5, 1, 32], # 5x5 conv, 32 inputs, 64 outputs 'conv2_w': [5, 5, 32, 64], # fully connected, 7*7*64 inputs, 1024 outputs 'dc1_w': [7*7*64, 1024], # 1024 inputs, 10 outputs (class prediction) 'out_w': [1024, n_classes] &#125; biases = &#123; 'conv1_b': [32], 'conv2_b': [64], 'dc1_b': [1024], 'out_b': [n_classes] &#125; y = cnn_net(x, weights, biases, dropout) # Optimizer with tf.name_scope('cost'): cost = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels = y_, logits = y)) tf.summary.scalar('cost', cost) tf.summary.histogram('cost', cost) # Train with tf.name_scope('train'): optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(cost) # Test with tf.name_scope('accuracy'): with tf.name_scope('correct_prediction'): correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1)) with tf.name_scope('accuracy'): accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32)) tf.summary.scalar('accuracy', accuracy) sess = tf.InteractiveSession() merged = tf.summary.merge_all() train_writer = tf.summary.FileWriter('train/', sess.graph) test_writer = tf.summary.FileWriter('test/') tf.global_variables_initializer().run() # Train the model, and also write summaries. # Every 10th step, measure test-set accuracy, and write test summaries # All other steps, run train_step on training data, &amp; add training summaries # Keep training until reach max iterations print('Wait for lock') with lock: run_state = running print('Start') step = 1 while step * batch_size &lt; training_iters and run_state: batch_x, batch_y = mnist.train.next_batch(batch_size) # Run optimization op (backprop) sess.run(optimizer, feed_dict = &#123;x: batch_x, y_: batch_y, keep_prob: dropout&#125;) if step % display_step == 0: # Record execution stats run_options = tf.RunOptions(trace_level = tf.RunOptions.FULL_TRACE) run_metadata = tf.RunMetadata() summary, _ = sess.run([merged, optimizer], feed_dict = &#123;x: batch_x, y_: batch_y, keep_prob: 1.&#125;, options = run_options, run_metadata = run_metadata) train_writer.add_run_metadata(run_metadata, 'step %d' % step) train_writer.add_summary(summary, step) print('Adding run metadata for', step) summary, loss, acc = sess.run([merged, cost, accuracy], feed_dict = &#123;x: batch_x, y_: batch_y, keep_prob: 1.&#125;) print("Iter" + str(step*batch_size) + ", Minibatch Loss=" + \ "&#123;:.6f&#125;".format(loss) + ", Training Accuracy=" + \ "&#123;:.5f&#125;".format(acc)) itchat.send("Iter" + str(step*batch_size) + ", Minibatch Loss=" + \ "&#123;:.6f&#125;".format(loss) + ", Training Accuracy=" + \ "&#123;:.5f&#125;".format(acc), 'filehelper') else: summary, _ = sess.run([merged, optimizer], feed_dict = &#123;x: batch_x, y_: batch_y, keep_prob: 1.&#125;) train_writer.add_summary(summary, step) step += 1 with lock: run_state = running print("Optimization Finished!") itchat.send("Optimization Finished!", 'filehelper') # Calculate accuracy for 256 mnist test images summary, acc = sess.run([merged, accuracy], feed_dict = &#123;x: mnist.test.images[:256], y_: mnist.test.labels[:256], keep_prob: 1.&#125; ) text_writer.add_summary(summary) print("Testing Accuracy:", acc) itchat.send("Testing Accuracy: %s" % acc, wechat_name) @itchat.msg_register([itchat.content.TEXT])def chat_trigger(msg): global lock, running, learning_rate, training_iters, batch_size, display_step if msg['Text'] == u'开始': print('Starting') with lock: run_state = running if not run_state: try: threading.Thread(target=nn_train, args=(msg['FromUserName'], (learning_rate, training_iters, batch_size, display_step))).start() except: msg.reply('Running') elif msg['Text'] == u'停止': print('Stopping') with lock: running = False elif msg['Text'] == u'参数': itchat.send('lr=%f, ti=%d, bs=%d, ds=%d'%(learning_rate, training_iters, batch_size, display_step),msg['FromUserName']) else: try: param = msg['Text'].split() key, value = param print(key, value) if key == 'lr': learning_rate = float(value) elif key == 'ti': training_iters = int(value) elif key == 'bs': batch_size = int(value) elif key == 'ds': display_step = int(value) except: passif __name__ == '__main__': itchat.auto_login(hotReload=True) itchat.run() 大家可以看到，我对先前的代码进行了一些修改。 下面我会对代码中用到 itchat 的部分进行一些简短的说明。 代码部分截图： 说明： 首先我导入了 itchat 和 threading。 在原先所有 print 消息的地方，都添加了 itchat.send() 来输出我们的模型训练日志。 加了一个带锁的状态量 running 用来做为发送微信消息的运行开关。 写了一个 itchat 的 handler（就是上图）。其作用就是当程序运行，我们需要在微信中，对自己的微信号发送「开始」，模型才会开始训练，为了防止信息阻塞，所以要用到 threading 将其放在另一个线程当中。在训练的过程中，如果我们觉得结果已到达我们自己的预期，可以微信发送「停止」来停止模型的训练过程。 另外，脚本刚开始运行时，程序会弹出一个包含二维码的图片，我们需要通过微信来扫描该二维码，来登陆微信并启动 itchat 的服务。 程序是包含了 Tensorboard 绘图的，所以等模型训练好，我们依然是可以通过 Tensorboard 来更加详细地查看我们模型的训练过程。 至此，我们就可以一边通过微信来监控我们的模型训练过程，一边与身边的朋友们谈笑风生了。 如果看过 itchat 那个连接的读者，可以了解到 itchat 同样是可以发送图片信息的，所以我们可以写额外的脚本在训练的过程中每隔 100 次迭代， plot 到目前为止 loss，acc 等指标的趋势图。在此，我就不再进行拓展了。 关于各个模块的作用，以及各个变量的意义，我在此就不再赘述了。 如果有读者对于 CNN 卷积神经网络有些陌生或者是遗忘，可以参考我的另外一篇文章 CNN on TensorFlow。 如果读者对 Tensorboard 有所遗忘，可以参考我的另一篇文章 「TensorFlow 1.0」 Tensorboard。]]></content>
      <categories>
        <category>TensorFlow</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>TensorFlow</tag>
        <tag>WeChat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[♞「Machine Learning」 Chapter 1]]></title>
    <url>%2F2016%2F12%2F26%2F%3CMachine%20Learning%3E%20Chapter%201%2F</url>
    <content type="text"><![CDATA[关于该书的其他学习笔记系列：「Machine Learning」 Related 归纳偏好 奥卡姆剃刀（Occam’s razor） NFL 定理（No Free Lunch Theorem） Key：我们可以把学习过程看做是一个在所有假设（hypothesis）组成的空间中进行搜索的过程，搜索目标就是找到与训练集“匹配”（fit）的假设。 归纳偏好 任何一个有效的及其学习算法必有其归纳偏好，否则它将被假设空间中看似在训练集上“等效”的假设所迷惑，而无法产生正确的学习结果。可以想象，如果没有偏好，我们的西瓜学习算法产生的模型每次在进行预测时随机抽选训练集上的等效假设，那么对这个新瓜“（色泽 = 青绿；根蒂 = 蜷缩；敲声 = 沉闷）”，模型告诉我们它是好的，但是时而告诉我们它是不好的，这样的学习结果显然没有意义。 事实上，归纳偏好对应了学习算法本身所作出的关于“什么样的模型更好”的假设。在具体的现实问题中，这个假设是否成立，即算法的归纳偏好是否与问题本身匹配，大多数时候直接决定了算法能否取得好的性能。 奥卡姆剃刀. “奥卡姆剃刀”（Occam’s razor）是一种常用的、自然科学研究中最基本的原则，即“若有多个假设与观察一致，则选择最简单的那个”。 然而，奥卡姆剃刀并非唯一可行的原则。书中给出了一个例子进行了解释： “假设 1：好瓜 ⟺（色泽 =*）^（根蒂 = 蜷缩）^（敲声 = 浊响）” “假设 2：好瓜 ⟺（色泽 =*）^（根蒂 = 蜷缩）^（敲声 =*）” 这两个假设，哪一个更“简单”呢？这个问题并不简单，我们需要借助其他机制才能解决。 NFL 定理（No Free Lunch Theorem）“没有免费的午餐”定理 简而言之就是，无论学习算法 $L_a$ 多聪明、学习算法 $L_b$ 多笨拙，它们的期望性竟然相同！ 那么既然所有学习算法的期望性能都跟随机胡猜差不多，那还有什么好学的？ 我们需注意到， NFL 定理有一个重要前提：所有“问题”出现的机会相同、或所有问题同等重要。但实际情形并不是这样。 很多时候，我们只关注自已正在试图解决的问题（例如某个具体应用任务），希望为它找到一个解决方案，至于这个解决方案在别的问题、甚至在相似的问题上是否为好方案，我们并不关心。例如，为了快速从 A 地到达 B 地，如果我们正在考虑的 A 地是南京鼓楼、B 地是南京新街口，那么“骑自行车”是很好的解决方案；这个方案对 A 地是南京鼓楼、B 地是北京新街口的情形显然很糟糕，但我们对此并不关心。 所以， NFL 定理最重要的寓意，是让我们清楚地认识到，脱离具体问题，空泛地谈论“什么学习算法更好”毫无意义，因为若考虑所有潜在的问题，则所有学习算法都一样好。要谈论算法的相对优劣，必须要针对具体的学习问题；在某些问题上表现好的学习算法，在另一些问题上却可能不尽如人意，学习算法自身的归纳偏好与问题是否相配，往往会起到决定性的作用。 Correct errors in printing： 暂无 Practice： 表 1.1 中若只包含编号为 1 和 4 的两个样例，试给出相应的版本空间. 数据集有 3 个属性，每个属性 2 种取值，一共 $ 3 \times 3 \times 3 + 1 = 28 $ 种假设。 与使用单个合取式来进行假设表示相比，用“析合范式”将使得假设空间具有更强的表示能力。例如： 好瓜 ⟺ ((色泽 = \*) ∧ (根蒂 = 蜷缩) ∧ (敲声 = \*)) ∨ ((色泽 = 乌黑) ∧ (根蒂 = \*) ∧ (敲声 = 沉闷)) 会把 (色泽 = 青绿) ∧ (根蒂 = 蜷缩) ∧ (敲声 = 清脆) 以及 (色泽 = 乌黑) ∧ (根蒂 = 硬挺) ∧ (敲声 = 沉闷) 都分类为“好瓜”。若使用最多包含 $k$ 个合取式的析合范式来表达表 1.1 西瓜分类问题的假设空间，试估算共有多少种可能的假设。 （提示：注意冗余情况， 如 $(A=a) \vee (A=*) \equiv (A=*)$ 等价。） 表 1.1 包含 4 个样例， 3 种属性，假设空间中有 $3 \times 4 \times 4 + 1 = 49 $ 种假设。在不考虑沉余的情况下，最多包含 $k$ 个合取式来表达假设空间，显然 $k$ 的最大值是 49，每次从中选出 $k$ 个来组成析合式，共 $ \sum C_{49}^k = 249 $ 种可能。（但是其中包含了很多沉余的情况） 如果考虑沉余的情况：在这里忽略空集，一个原因是并不是太明白空集是否应该加入析合式，另外就算需要加入，求出了前面 48 种假设的组合，可以很容易求出加入空集后的组合数(每种可能都可以加上空集，再加上 1 种空集单独的情况)。 48 种假设中： 具体假设： $2 \times 3 \times 3=18$ 种 一个属性泛化假设： $2 \times 3 + 3 \times 3 + 2 \times 3 = 21$ 种 两个属性泛化假设： $2 + 3 + 3 = 8$ 种 三属性泛化： $1$ 种 当 $k=1$ 时，任选一种假设都可以作为一种没有沉余的假设，共 48 种。$k$ 的最大值是 18 ，当 $k=18$ 时，就是 18 种具体属性假设的析取式，共 1 种。 而当 $k$ 取中间值时，就不好分析了。 下面提供一种我认为可行的算法：由于属性泛化后，一个泛化的假设可以对应多个具体假设。把所有假设按三属性泛化，二属性泛化，一属性泛化，具体属性排序(这样可以保证排在后面的假设不会包含前面的任何一个假设，所以省略了一些包含判断)，进行循环枚举，按顺序遍历所有假设组合 248 种可能(当然绝大部分都提前结束了，不会是那么夸张的量级，虽然也不低)： 使用栈来实现非递归，如果当前假设还有没被析合式所包含的具体假设，则认为可以入栈，并当前栈大小的长度计数加 1 ，并继续扫描。 如果当前扫描已经到了最后一个假设，或者所有具体假设已经被全部包含，则退栈。 循环结束条件：当最后一个假设作为第一个压入栈的元素时，认为已经遍历结束。 由于一共有 18 种具体假设，可以用一个 32 位整型 (变量为 hypos_cur) 的后 18 位来表示每一个具体假设。用 1 表示具体假设没被包含，用 0 表示具体假设已经被析合式包含。初始的析合式为空，可以设初试值为 0X3FFFF 。每个假设也对应一个 32 位整型(假设变量为 hypo_const), 代表着它所对应了哪些具体假设，如果它包含了某种具体假设，则该位为 1 。 判断析合式是否包含了全部的具体假设：hypos_cur=0 。 判断该假设是否已经被析合范式包含: 用 hypo_const 与 hypos_cur 做与运算(结果用 hypo_tmp 表示)，如果为 0 表示已经被包含(判断该假设是否包含了当前的析合式: 用 hypo_const 与 hypos_cur 做或运算，如果为 0X3FFFFF ，则认为该假设包含了当前析合式，但由于前面对所有假设做了排序，不可能出现这种情况，所以可以省略该判断)。 当某个假设加入析合范式后 (入栈) 用 hypos_cur 与 hypo_tmp 做异或运算，来更改析合式所包含的具体假设。 出栈时再次用 hypos_cur 与 hypo_tmp 做异或，回到加入该假设前的情况。123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168#include &lt;vector&gt;#include &lt;stack&gt;using namespace std;// 按泛化程度排序，保证排在后面的假设不会不会包含前面的任何一个假设 static const char list[] = &#123; 0,0,0, 0,0,1,0,0,2,0,0,3,0,1,0,0,2,0,0,3,0,1,0,0,2,0,0, 0,1,1,0,1,2,0,1,3,0,2,1,0,2,2,0,2,3,0,3,1,0,3,2,0,3,3, 1,0,1,1,0,2,1,0,3,2,0,1,2,0,2,2,0,3, 1,1,0,1,2,0,1,3,0,2,1,0,2,2,0,2,3,0, 1,1,1,1,1,2,1,1,3,1,2,1,1,2,2,1,2,3,1,3,1,1,3,2,1,3,3, 2,1,1,2,1,2,2,1,3,2,2,1,2,2,2,2,2,3,2,3,1,2,3,2,2,3,3&#125;;// 用来派生的抽象类class hypos &#123;public: virtual int insert(int cur) = 0;&#125;;// 单个的假设类/*hypo_const 假设对应的具体假设集合*/class hypo :public hypos &#123;public: hypo(int a, int b, int c) &#123; hypo_const = 0; vector&lt;char&gt; p[3]; if (a == 0) &#123; p[0].push_back(1); p[0].push_back(2); &#125; else p[0].push_back(a); if (b == 0) &#123; p[1].push_back(1); p[1].push_back(2); p[1].push_back(3); &#125; else p[1].push_back(b); if (c == 0) &#123; p[2].push_back(1); p[2].push_back(2); p[2].push_back(3); &#125; else p[2].push_back(c); for (unsigned int i = 0;i &lt; p[0].size();i++) for (unsigned int j = 0;j &lt; p[1].size();j++) for (unsigned int k = 0;k &lt; p[2].size();k++) hypo_const |= (1 &lt;&lt; (p[0][i] * 9 + p[1][j] * 3 + p[2][k] - 13)); &#125; // 判断是否要加入到析合式 如果还有具体假设没被包含，则加入 int insert(int cur) &#123; return (hypo_const &amp; cur); &#125;;private: int hypo_const;&#125;;// 用于压入栈的派生类 用来实现非递归/*hypo_tmp 记录这个假设入栈时，带入了哪些具体假设，出栈时要还原ptr 记录入栈时的位置*/class hypo_ss :public hypos &#123;public: hypo_ss(int _ptr,int tmp)&#123; hypo_tmp = tmp; ptr = _ptr; &#125; int insert(int cur) &#123; return 0; &#125;; int hypo_tmp; int ptr;&#125;;// 用来循环遍历的类/*sum 各个长度的析合式各有多少种可能ss 用来实现非递归的栈hypos_cur 当前没被包含的具体假设 初始值为 0X3FFFFhyposs 48 个假设集合*/class Traversal :public hypos &#123;public: Traversal() &#123; hypos_cur = 0x3ffff; for(int i=0;i&lt;48;i++) hyposs.push_back(hypo(list[3*i], list[3*i+1], list[3*i+2])); &#125; // 循环顺序遍历的主体 //cur 初试的位置 设为 0 int insert(int cur) &#123; // 当前指向的位置 int ptr = cur; while (1) &#123; // 退出条件 当最后一个假设作为第一个入栈的元素 表示遍历完成 if (ptr &gt; 47 &amp;&amp; !ss.size()) break; // 回退条件 扫描到最后或者所有具体假设都被包含 if (hypos_cur == 0 || ptr&gt;47) &#123; hypo_ss hypo_tmp = ss.top(); hypos_cur ^= hypo_tmp.hypo_tmp; ptr = hypo_tmp.ptr + 1; ss.pop(); continue; &#125; // 入栈条件 如果该假设还有未被包含的具体假设 则入栈，并当前栈大小的计数加 1 if (int tmp =hyposs[ptr].insert(hypos_cur)) &#123; hypos_cur ^= tmp; ss.push(hypo_ss(ptr, tmp)); if (sum.size() &lt; ss.size()) sum.push_back(0); sum[ss.size() - 1]++; &#125; ptr++; &#125; return 1; &#125;; // 输出各个长度的可能数 void print() &#123; for (unsigned int i = 0;i &lt; sum.size();i++) printf("length %d : %d\n", i + 1, sum[i]); &#125;private: vector&lt;int&gt; sum; stack&lt;hypo_ss&gt; ss; int hypos_cur; vector&lt;hypo&gt; hyposs;&#125;;int main()&#123; Traversal traversal; traversal.insert(0); traversal.print(); system("pause"); return 0;&#125;/* 最终输出:length 1 : 48length 2 : 931length 3 : 10332length 4 : 72358length 5 : 342057length 6 : 1141603length 7 : 2773332length 8 : 4971915length 9 : 6543060length 10 : 6175660length 11 : 4003914length 12 : 1676233length 13 : 422676length 14 : 61884length 15 : 5346length 16 : 435length 17 : 27length 18 : 1*/ 3. 若数据包含噪声，则假设空间中可能不存在与所有训练样本都一致的假设。在此情形下，试设计一种归纳偏好用于假设选择。 通常认为两个数据的属性越相近，则更倾向于将他们分为同一类。若相同属性出现了两种不同的分类，则认为它属于与他最临近几个数据的属性。也可以考虑同时去掉所有具有相同属性而不同分类的数据，留下的数据就是没误差的数据，但是可能会丢失部分信息。]]></content>
      <categories>
        <category>Machine Learning</category>
        <category>Book:「Machine Learning」</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Computer Vision」 JPEG Compression]]></title>
    <url>%2F2016%2F04%2F15%2F%3CComputer%20Vision%3E%20JPEG%20Compression%2F</url>
    <content type="text"><![CDATA[Related 颜色模式转换: RBG to YUV 采样 &amp; 分块 DCT 离散余弦变换 量化 DPCM 差分编码（对 DC 系数） RLE 游程编码（对 AC 系数）：Zig-Zag 扫描 熵编码：Huffman 编码 颜色模式转换JPEG 采用的是 YCrCb 颜色空间，而 BMP 采用的是 RGB 颜色空间，要想对 BMP 图片进行压缩，首先需要进行颜色空间的转换。YCrCb 颜色空间中，$Y$ 代表亮度，$Cr$，$Cb$ 则代表色度和饱和度（也有人将 $Cb$，$Cr$ 两者统称为色度），三者通常以 $Y$，$U$，$V$ 来表示，即用 $U$ 代表 $Cb$，用 $V$ 代表 $Cr$。RGB 和 YCrCb 之间的转换关系如下所示： \begin{align} Y &= &0.299R &+ 0.587G + 0.114B \cr Cb &= &-0.168R &- 0.331G + 0.500B + 128 \cr Cr &= &0.500R &- 0.418G - 0.081B + 128 \end{align}采样 研究发现，人眼对亮度变换的敏感度要比对色彩变换的敏感度高出很多。 因此，我们可以认为 Y 分量要比 Cb，Cr 分量重要的多。在 BMP 图片中，RGB 三个分量各采用一个字节进行采样，也就是我们常听到的 RGB-888 的模式；而 JPEG 图片中，通常采用两种采样方式：YUV-411 和 YUV-422，它们所代表的意义是 Y，Cb，Cr 三个分量的数据取样比例一般是 4：1：1 或者 4：2：2（4：1：1 含义就是：在 $2\times 2$ 的单元中，本应分别有 4 个 Y，4 个 U，4 个 V 值，用 12 个字节进行存储。经过 4:1:1 采样处理后，每个单元中的值分别有 4 个 Y、1 个 U、1 个 V，只要用 6 个字节就可以存储了） 这样的采样方式，虽然损失了一定的精度但也在人眼不太察觉到的范围内减小了数据的存储量。当然，JPEG 格式里面也允许将每个点的 U，V 值都记录下来。 分块 由于后面的 DCT 变换是是对 $8 \times 8$ 的子块进行处理的，因此，在进行 DCT 变换之前必须把源图象数据进行分块。源图象中每点的 3 个分量是交替出现的，先要把这 3 个分量分开，存放到 3 张表中去。然后由左及右，由上到下依次读取 $8 \times 8$ 的子块，存放在长度为 64 的表中，即可以进行 DCT 变换。 注意，编码时，程序从源数据中读取一个 $8 \times 8$ 的数据块后，进行 DCT 变换，量化，编码，然后再读取、处理下一个 $8 \times 8$ 的数据块。 JPEG 编码是以每 $8 \times 8$ 个点为一个单位进行处理的. 所以如果原始图片的长宽不是 8 的倍数， 都需要先补成 8 的倍数， 使其可以进行一块块的处理。将原始图像数据分为 $8 \times 8$ 的数据单元矩阵之后，还必须将每个数值减去 128，然后一一带入 DCT 变换公式，即可达到 DCT 变换的目的。图像的数据值必须减去 128，是因为 DCT 公式所接受的数字范围是 -128 到 127 之间。 DCT 离散余弦变化DCT（Discrete Cosine Transform，离散余弦变换），是码率压缩中常用的一种变换编码方法。任何连续的实对称函数的傅里叶变换中只含有余弦项，因此，余弦变换同傅里叶变换一样具有明确的物理意义。DCT 是先将整体图像分成 $N \times N$ 的像素块，然后针对 $N \times N$ 的像素块逐一进行 DCT 操作。需要提醒的是，JPEG 的编码过程需要进行正向离散余弦变换，而解码过程则需要反向离散余弦变换。 二维 DCT 变换公式： F(u,v)=c(u)c(v)\sum_{i=0}^{N-1}\sum_{j=0}^{N-1}f(i,j)\cos \left[\frac{(i+0.5)\pi}{N}u\right]\cos \left[\frac{(j+0.5)\pi}{N}v\right] c(u)= \begin{cases} \sqrt{\frac 1N},& u = 0 \cr \sqrt{2 \over N},& u \neq 0 \cr \end{cases}二维 DCT 逆变换公式： f(i,j)=\sum_{u=0}^{N-1}\sum_{v=0}^{N-1}c(u)c(v)F(u,v)\cos \left[\frac{(i+0.5)\pi}{N}u\right]\cos \left[\frac{(j+0.5)\pi}{N}v\right] c(u)= \begin{cases} \sqrt{\frac 1N},& u = 0 \cr \sqrt{2 \over N},& u \neq 0 \cr \end{cases}这里的 N 是水平、垂直方向的像素数目，一般取值为 8。$8 \times 8$ 的二维像素块经过 DCT 操作之后，就得到了 $8 \times 8$ 的变换系数矩阵。这些系数，都有具体的物理含义。 例如，$U=0$，$V=0$ 时的 $F(0,0)$ 是原来的 64 个数据的均值，相当于直流分量，也有人称之为 DC 系数或者直流系数。随着 $U$，$V$ 的增加，相另外的 63 个系数则代表了水平空间频率和垂直空间频率分量（高频分量）的大小，多半是一些接近于 0 的正负浮点数，我们称之为交流系数 AC。 DCT 变换后的 $8 \times 8$ 的系数矩阵中，低频分量集中在矩阵的左上角。高频成分则集中在右下角。这里，我们暂时先只考虑水平方向上一行数据（8 个像素）的情况时的 DCT 变换，从而来说明其物理意义。如下图所示： 原始的图像信号（最左边的波形）经过 DCT 变换之后变成了 8 个波，其中第一个波为直流成分，其余 7 个为交流成分。可见图像信号被分解为直流成分和一些从低频到高频的各种余弦成分。而 DCT 系数只表示了该种成分所占原图像信号的份额大小。显然，恢复图像信息可以表示为下面的式子： F(n) = C(n) \cdot E(n)这里，$E(n)$ 是一个基底，$C(n)$ 是 DCT 系数，$F(n)$ 则是图像信号；如果考虑垂直方向的变化，那就需要一个二维的基底。大学里面的信号处理，傅里叶变换等课程上也讲过，任何信号都可以被分解为基波和不同幅度的谐波的组合，而 DCT 变换的物理意义也正是如此。 由于大多数图像的高频分量比较小，相应的图像高频分量的 DCT 系数经常接近于 0，再加上高频分量中只包含了图像的细微的细节变化信息，而人眼对这种高频成分的失真不太敏感，所以，可以考虑将这一些高频成分予以抛弃，从而降低需要传输的数据量。这样一来，传送 DCT 变换系数的所需要的编码长度要远远小于传送图像像素的编码长度。到达接收端之后通过反离散余弦变换就可以得到原来的数据，虽然这么做存在一定的失真，但人眼是可接受的，而且对这种微小的变换是不敏感的。所谓 JPEG 的有损压缩，损的是量化过程中的高频部分，romove 50% 的高频信息可能对于编码信息只损失了 5%。 量化 图像数据转换为 DCT 频率系数之后，还要进行量化阶段，才能进入编码过程。量化阶段需要两个 $8 \times 8$ 量化矩阵数据，将频率系数除以量化矩阵的值之后取整，即完成了量化过程。 简而言之，所谓量化就是用像素值除以量化表对应值所得的结果。 由于量化表左上角的值较小，右下角的值较大，这样就起到了保持低频分量，抑制高频分量的目的。JPEG 使用的颜色是 YUV 格式。我们提到过，$Y$ 分量代表了亮度信息，$UV$ 分量代表了色差信息。相比而言，$Y$ 分量更重要一些。我们可以对 $Y$ 采用细量化，对 $UV$ 采用粗量化，可进一步提高压缩比。所以上面所说的量化表通常有两张，一个是专门处理亮度的频率系数，另一个则是针对色度的频率系数，即一张是针对 $Y$ 的，而另一张是针对 $UV$ 的。当频率系数经过量化之后，将频率系数由浮点数转变为整数，这才便于执行最后的编码。不难发现，经过量化阶段之后，所有的数据只保留了整数近似值，也就再度损失了一些数据内容。在 JPEG 算法中，由于对亮度和色度的精度要求不同，分别对亮度和色度采用不同的量化表。 下图给出 JPEG 的亮度量化表和色度量化表，该量化表是从广泛的实验中得出的。当然，你也可以自定义量化表。 JPEG 亮度量化表 \begin{array}{|c|c|c|c|c|c|c|c|c|} \hline 16 & 11 & 10 & 16 & 24 & 40 & 51 & 61 \cr \hline 12 & 12 & 14 & 19 & 26 & 58 & 60 & 55 \cr \hline 14 & 13 & 16 & 24 & 40 & 57 & 69 & 56 \cr \hline 14 & 17 & 22 & 29 & 51 & 87 & 80 & 62 \cr \hline 18 & 22 & 37 & 56 & 68 & 109 & 103 & 77 \cr \hline 24 & 35 & 55 & 64 & 81 & 104 & 113 & 92 \cr \hline 49 & 64 & 78 & 87 & 103 & 121 & 120 & 101 \cr \hline 72 & 92 & 95 & 98 & 112 & 100 & 103 & 99 \cr \hline \end{array}JPEG 色度量化表 \begin{array}{|c|c|c|c|c|c|c|c|c|} \hline 17 & 18 & 24 & 47 & 99 & 99 & 99 & 99 \cr \hline 18 & 21 & 26 & 66 & 99 & 99 & 99 & 99 \cr \hline 24 & 26 & 56 & 99 & 99 & 99 & 99 & 99 \cr \hline 47 & 66 & 99 & 99 & 99 & 99 & 99 & 99 \cr \hline 99 & 99 & 99 & 99 & 99 & 99 & 99 & 99 \cr \hline 99 & 99 & 99 & 99 & 99 & 99 & 99 & 99 \cr \hline 99 & 99 & 99 & 99 & 99 & 99 & 99 & 99 \cr \hline 99 & 99 & 99 & 99 & 99 & 99 & 99 & 99 \cr \hline \end{array}这两张表依据心理视觉阀制作, 对 8 bit 的亮度和色度的图象的处理效果不错。 量化表是控制 JPEG 压缩比的关键，这个步骤除掉了一些高频量, 损失了很多细节信息。但事实上人眼对高频信号的敏感度远没有低频信号那么敏感。 所以处理后的视觉损失很小，从上面的量化表也可以看出，低频部分采用了相对较短的量化步长，而高频部分则采用了相对较长的量化步长，这样做，也是为了在一定程度上得到相对清晰的图像和更高的压缩率。另一个重要原因是所有的图片的点与点之间会有一个色彩过渡的过程，而大量的图象信息被包含在低频率空间中，经过 DCT 处理后, 在高频率部分, 将出现大量连续的零。 DPCM 差分编码（对 DC 系数）&amp; RLE 游程编码（对 AC 系数）DCT 将一个 $8 \times 8$ 的数组变换成另一个 $8 \times 8$ 的数组. 编码信息分两类，一类是每个 $8 \times 8$ 格子 $F(0,0)$ 位置上元素，这是 DC（直流分量），代表 $8 \times 8$ 个子块的平均值，JPEG 中对 $F(0,0)$ 单独编码，由于两个相邻的 $8 \times 8$ 子块的 DC 系数相差很小，所以对它们采用 差分编码 DPCM （Difference Pulse Code Modulation），可以提高压缩比，也就是说 对相邻的子块 DC 系数的差值进行编码。另一类是 $8 \times 8$ 块的其它 63 个子块，即交流（AC）系数，采用 行程编码 RLE （Run-length encode）。 那么，现在问题来了：这 63 个系数应该按照怎么样的顺序排列？为了保证低频分量先出现，高频分量后出现，以增加行程中连续 “0” 的个数，这 63 个元素采用了 “之” 字型（Zig-Zag）的排列方法，如下图所示： 举个例子，现在在一个 $ 8\times 8$ 的 block 中： \left[\begin{array}{cccccccc} 0 & 1 & 5 & 6 & 14 & 15 & 27 & 28 \cr 2 & 4 & 7 & 13 & 16 & 26 & 29 & 42 \cr 3 & 8 & 12 & 17 & 25 & 30 & 41 & 43 \cr 9 & 11 & 18 & 24 & 31 & 40 & 44 & 53 \cr 10 & 19 & 23 & 32 & 39 & 45 & 52 & 54 \cr 20 & 22 & 33 & 38 & 46 & 51 & 55 & 60 \cr 21 & 34 & 37 & 47 & 50 & 56 & 59 & 61 \cr 35 & 36 & 48 & 49 & 57 & 58 & 62 & 63 \cr \end{array} \right]进行 DCT 余弦离散变换之后，对其进行 Zig-Zag 扫描排序的过程： \left[\begin{array}{cccccccc} -26 & -3 & -6 & 2 & 2 & -1 & 0 & 0 \cr 0 & -3 & -4 & 1 & 1 & 0 & 0 & 0 \cr -3 & 1 & 5 & -1 & -1 & 0 & 0 & 0 \cr -4 & 1 & 2 & -1 & 0 & 0 & 0 & 0 \cr 1 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \cr 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \cr 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \cr 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \cr \end{array} \right]DC 系数的差分脉冲调制编码$8\times 8$ 的图像块经过 DCT 变换之后得到的 DC 系数有两个特点： 系数的数值比较大； 相邻的 $8\times 8$ 图像块的 DC 系数值变化不大； 根据这两个特点，DC 系数一般采用差分脉冲调制编码 DPCM（Difference Pulse Code Modulation），即：取同一个图像分量中每个 DC 值与前一个 DC 值的差值来进行编码。对差值进行编码所需要的位数会比对原值进行编码所需要的位数少了很多。假设某一个 $8\times 8$ 图像块的 DC 系数值为 15，而上一个 $8\times 8$ 图像块的 DC 系数为 12，则两者之间的差值为 3。 DC 系数的中间格式计算JPEG 中为了更进一步节约空间，并不直接保存数据的具体数值，而是将数据按照位数分为 16 组，保存在表里面。这也就是所谓的变长整数编码 VLI。即，第 0 组中保存的编码位数为 0，其编码所代表的数字为 0；第 1 组中保存的编码位数为 1，编码所代表的数字为 -1 或者 1 ……，如下面的表格所示, 暂且称其为 VLI 编码表： \begin{array}{|c|c|c|} \hline \text{数值} & \text{组} & \text{实际保存值} \cr \hline 0 & 0 & - \cr \hline -1, 1 & 1 & 0,1 \cr \hline -3,-2,2,3 & 2 & 00,01,10,11 \cr \hline -7,-6,-5,-4,4,5,6,7 & 3 & 000,001,010,011,100,101,110,111 \cr \hline -15,..,-8,8,..,15 & 4 & 0000,..,0111,1000,..,1111 \cr \hline -31,..,-16,16,..,31 & 5 & 00000,..,01111,10000,..,11111 - \cr \hline -63,..,-32,32,..,63 & 6 & . \cr \hline -127,..,-64,64,..,127 & 7 & . \cr \hline -255,..,-128,128,..,255 & 8 & . \cr \hline -511,..,-256,256,..,511 & 9 & . \cr \hline -1023,..,-512,512,..,1023 & 10 & . \cr \hline -2047,..,-1024,1024,..,2047 & 11 & . \cr \hline -4095,..,-2048,2048,..,4095 & 12 & . \cr \hline -8191,..,-4096,4096,..,8191 & 13 & . \cr \hline -16383,..,-8192,8192,..,16383 & 14 & . \cr \hline -32767,..,-16384,16384,..,32767 & 15 & . \cr \hline \end{array}前面提到的那个 DC 差值为 3 的数据，通过查找 VLI 可以发现，整数 3 位于 VLI 表格的第 2 组，因此，可以写成 $(2)(3)$ 的形式，该形式，称之为 DC 系数的中间格式。 AC 系数的行程长度编码（RLC）量化之后的 AC 系数的特点是，63 个系数中含有很多值为 0 的系数。因此，可以采用行程编码 RLC（Run Length Coding）来更进一步降低数据的传输量。利用该编码方式，可以将一个字符串中重复出现的连续字符用两个字节来代替，其中，第一个字节代表重复的次数，第二个字节代表被重复的字符串。例如，$(4, 6)$ 就代表字符串 “6666”。 但是，在 JPEG 编码中，RLC 的含义就同其原有的意义略有不同。在 JPEG 编码中，假设 RLC 编码之后得到了一个 $(M,N)$ 的数据对，其中 M 是两个非零 AC 系数之间连续的 0 的个数（即，行程长度），N 是下一个非零的 AC 系数的值。采用这样的方式进行表示，是因为 AC 系数当中有大量的 0，而采用 Zigzag 扫描也会使得 AC 系数中有很多连续的 0 的存在，如此一来，便非常适合于用 RLC 进行编码。 例如，现有一个字符串，如下所示： 57, 45, 0, 0, 0, 0, 23, 0, -30, -8, 0, 0, 1, 0 0 0 .....经过 RLC 之后，将呈现出以下的形式： (0, 57) ; (0, 45) ; (4, 23) ; (1, -30) ; (0, -8) ; (2, 1) ; (0, 0)注意，如果 AC 系数之间连续 0 的个数超过 16，则用一个扩展字节 (15, 0) 来表示 16 连续的 0。 AC 系数的中间格式 根据前面提到的 VLI 表格，对于前面的字符串： (0, 57) ; (0, 45) ; (4, 23) ; (1, -30) ; (0, -8) ; (2, 1) ; (0, 0)只处理每对数右边的那个数据，对其进行 VLI 编码: 查找上面的 VLI 编码表格，可以发现，57 在第 6 组当中，因此，可以将其写成 $(0,6),57$ 的形式，该形式，称之为 AC 系数的中间格式。同样的 $(0, 45)$ 的中间格式为：$(0, 6), 45$；$(1, -30)$ 的中间格式为：$(1, 5), -30$； 熵编码：Huffman 编码 在得到 DC 系数的中间格式和 AC 系数的中间格式之后，为进一步压缩图象数据，有必要对两者进行熵编码。JPEG 标准具体规定了两种熵编码方式：Huffman 编码和算术编码。JPEG 基本系统规定采用 Huffman 编码（因为不存在专利问题），但 JPEG 标准并没有限制 JPEG 算法必须用 Huffman 编码方式或者算术编码方式。 Huffman 编码 对出现概率大的字符分配字符长度较短的二进制编码，对出现概率小的字符分配字符长度较长的二进制编码，从而使得字符的平均编码长度最短。Huffman 编码的原理请参考数据结构中的 Huffman 树或者最优二叉树。 Huffman 编码时 DC 系数与 AC 系数分别采用不同的 Huffman 编码表，对于亮度和色度也采用不同的 Huffman 编码表。因此，需要 4 张 Huffman 编码表才能完成熵编码的工作。具体的 Huffman 编码采用查表的方式来高效地完成。然而，在 JPEG 标准中没有定义缺省的 Huffman 表，用户可以根据实际应用自由选择，也可以使用 JPEG 标准推荐的 Huffman 表。或者预先定义一个通用的 Huffman 表，也可以针对一副特定的图像，在压缩编码前通过搜集其统计特征来计算 Huffman 表的值。 下面我们举例来说明 $8\times 8$ 图像子块经过 DCT 及量化之后的处理过程：假设一个图像块经过量化以后得到以下的系数矩阵： \left[\begin{array}{cccccccc} 15 & 0 & -1 & 0 & 0 & 0 & 0 & 0 \cr -2 & -1 & 0 & 0 & 0 & 0 & 0 & 0 \cr -1 & -1 & 0 & 0 & 0 & 0 & 0 & 0 \cr 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \cr 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \cr 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \cr 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \cr 0 & 0 & 0 & 0 & 0 & 0 & 0 & 0 \cr \end{array} \right]显然，DC 系数为 15，假设前一个 $8\times 8$ 的图像块的 DC 系数量化值为 12，则当前 DC 系统同上一个 DC 系数之间的差值为 3，通过查找 VLI 编码表，可以得到 DC 系数的中间格式为 $(2)(3)$，这里的 2 代表后面的数字 $(3)$ 的编码长度为 2 位；之后，通过 Zigzag 扫描之后，遇到第一个非 0 的 AC 系数为 -2，遇到 0 的个数为 1，AC 系数经过 RLC 编码后可表示为 $(1, -2)$，通过查找 VLI 表发现，-2 在第 2 组，因此，该 AC 系数的中间格式为 $(1, 2) , -2$；其余的点类似，可以求得这个 $ 8\times 8$ 子块熵编码的中间格式为: \begin{array}{c|c} DC & (2)(3) \cr \hline AC & (1,2)(-2),(0,1)(-1),(0,1)(-1),(0,1)(-1),(2,1)(-1),(EOB)(0,0) \end{array} 对于 DC 系数的中间格式 $(2)(3)$ 而言，数字 2 查 DC 亮度 Huffman 表得到 011，数字 3 通过查找 VLI 编码表得到其被编码为 11； 对于 AC 系数的中间格式 $(1, 2)(-2)$ 而言，$(1, 2)$ 查 AC 亮度 Huffman 表得到 11011，-2 通过查找 VLI 编码表得到其被编码为 01； 对于 AC 系数的中间格式 $(0, 1)(-1)$ 而言，$(0, 1)$ 查 AC 亮度 Huffman 表得到 00，数字 -1 通过查找 VLI 编码表得到其被编码为 0； 对于 AC 系数的中间格式 $(2, 1)(1)$ 而言，$(2, 1)$ 查 AC 亮度 Huffman 表得到 11100，数字 -1 通过查找 VLI 编码表得到其被编码为 0； 对于 AC 系数的中间格式 $(0, 0)$ 而言，查 AC 亮度 Huffman 表得到 1010； 因此，最后这个 $8\times 8$ 子块亮度信息压缩后的数据流为 01111，1101101，000，000，000，111000，1010。总共 31 比特，其压缩比是 $ \frac{64 \times 8}{31} =16.5$，大约每个像素用半个比特。]]></content>
      <categories>
        <category>Computer Vision</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Computer Vision</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[♞「Programming Collective Intelligence」 Chapter 3]]></title>
    <url>%2F2016%2F03%2F19%2F%3CProgramming%20Collective%20Intelligence%3E%20Chapter%203%2F</url>
    <content type="text"><![CDATA[关于该书的其他学习笔记系列：「Programming Collective Intelligence」 Related 皮尔逊相关系数 分级聚类 K- 均值聚类 针对偏好的聚类 多维缩放 EM 聚类 Key:皮尔逊相关系数：定义：两个变量之间的皮尔逊相关系数定义为 （两个变量之间的协方差） 和（两个变量标准差的积）的商。 \rho_{x,y} = \frac{cov(X,Y)}{\sigma_{X}\sigma_{Y}}=\frac{E[(X-E(X))\cdot (Y-E(Y))]}{\sigma_{X}\sigma_{Y}}=\frac{E(XY)-E(X)E(Y)}{\sigma_{X}\sigma_{Y}}公式进一步推导： \rho_{x,y} = \frac{\sum XY - \frac{\sum X \sum Y}{N}}{\sqrt{(\sum X-\frac{(\sum X)^2}{N})(\sum Y-\frac{(\sum Y)^2}{N})}}12345678910111213141516171819from math import *def pearson(v1, v2): sum1 = sum(v1) sum2 = sum(v2) # 求平方和 sum1_Sq = sum([pow(v, 2) for v in v1]) sum2_Sq = sum([pow(v, 2) for v in v2]) # 求乘积之和 pSum = sum([v1[i]*v2[i] for i in range(len(v1))]) num = pSum-(sum1*sum2/len(v1)) den = sqrt((sum1_Sq-pow(sum1, 2)/len(v1))*(sum2_Sq-pow(sum2, 2)/len(v2))) if den == 0: return 0 return 1.0 - num/den 皮尔逊相关度的计算结果在两者完全匹配的情况下为 1.0，而在两者毫无关系的情况下则为 0.0。此段代码的最后一行，返回的是以 1.0 减去皮尔逊相关度之后的结果，这样的目的是为了让相似度越大的两个元素之间的距离变得更小（做了一个小处理）。 分级聚类：分级聚类通过连续不断地将最为相似的群组两两合并，来构造出一个群组的层级结构。其中的每个群组都是从单一元素开始的。在每次迭代的过程，分级聚类算法会计算每两个群组间的距离，并将距离最近的两个群组合并成一个新的群组。这一过程会一直重复下去，直到只剩一个群组为止。 直接使用 blogdata.txt 博客数据集，不要用书上前面的代码来下载一系列博客的订阅源，从而构造这样一个数据集，因为书上的代码无法使用，一些库的模块功能已经过时，运行会出错。 12345678910111213def readfile(filename): lines = [line for line in file(filename)] colnames = lines[0].strip().split('\t')[1:] rownames = [] data = [] for line in lines[1:]: p = line.strip().split('\t') rownames.append(p[0]) data.append([float(x) for x in p[1:]]) return colnames, rownames, data colnames = [‘china’, ‘kids’, …, ‘book’]为所有博客中出现的单词的单词表。 rownames = [‘$blog_1$’, ‘$blog_2$’, …, ‘$blog_n$’]为所有博客的名字表。 data = [[0,0, 1.0, 3.0, …],[2.0, 3.0, 0.0, …], …,[4.0, 5.0, 3.0, …]]为各个博客在单词表中各个单词出现的次数的表。 很容易想到用树结构来表示聚类这样的结构关系。分级聚类算法中的每一个聚类，可以是树中的枝节点，也可以是与数据集中实际数据行相对应的叶节点。没一个聚类还包含了指示器位置的信息，这一信息可以是来自叶节点的行数据，也可以是来自枝节点的经合并后的数据。我们可以新建一个 bicluster 类，将所有这些属性存放其中，并以此来描述这棵层级树。 1234567class bicluster: def __init__(self, vec, left = None, right = None, distance = 0.0, id = None): self.left = left self.right = right self.vec = vec self.id = id self.distance = distance 分级聚类算法以一组对应于原始数据项的聚类开始。函数的主循环部分会尝试每一组可能的配对并计算它们的相关度，以此来找出最佳配对。最佳配对的两个聚类会被合并成一个新的聚类。新生成的聚类中所包含的数据，等于将两个旧聚类的数据求均值之后得到的结果。这一过程会一直重复下去，知道只剩下一个聚类为止。由于整个计算过程可能会非常耗时，我们需要将每个配对的相关度计算结果保存起来以便优化执行速度。 123456789101112131415161718192021222324252627282930313233def hcluster(rows, distance = pearson): distances = &#123;&#125; currentclustid = -1 # 最开始的聚类就是数据集中的行 clust = [bicluster(rows[i], id = i) for i in range(len(rows))] while len(clust) &gt; 1: lowestpair = (0, 1) closest = distance(clust[0].vec, clust[1].vec) # 遍历每一个配对，寻找最小距离 for i in range(len(clust)): for j in range(i+1, len(clust)): # 用 distances 来缓存距离的计算值 if (clust[i].id, clust[j].id) not in distances: distances[(clust[i].id, clust[j].id)] = distance(clust[i].vec, clust[j].vec) d = distances[(clust[i].id, clust[j].id)] if d &lt; closest: closest = d lowestpair = (i, j) # 计算两个聚类的平均值 mergevec = [(clust[lowestpair[0]].vec[i] + clust[lowestpair[1]].vec[i])/2.0 for i in range(len(clust[0].vec))] # 建立新的聚类，聚类后的新聚类的 vec 更新为两个原先聚类的均值 newcluster = bicluster(mergevec, left = clust[lowestpair[0]], right = clust[lowestpair[1]], distance = closest, id = currentclustid) # 去除原先的两个初始聚类，将新聚类添加至 clust，然后递归重复过程 currentclustid -= 1 del clust[lowestpair[1]] del clust[lowestpair[0]] clust.append(newcluster) return clust[0] 其中 distance = pearson 表示的是采用皮尔逊相关系数来度量变量之间的距离，也可以构造其他距离度量函数（比如曼哈顿距离或者欧式距离）。 接下来就是直观地展现最终的聚类结果，就是绘制树状图。 123456789101112131415161718192021222324252627282930313233343536373839404142from PIL import Image, ImageDrawdef getheight(clust): if clust.left == None and clust.right == None: return 1 return getheight(clust.left) + getheight(clust.right)def getdepth(clust): if clust.left == None and clust.right == None: return 0 return max(getdepth(clust.left), getdepth(clust.right)) + clust.distancedef drawdendrogram(clust, labels, jpeg = 'clusters.jpg'): h = getheight(clust)*20 w = 1200 depth = getdepth(clust) scaling = float(w - 150)/depth img = Image.new('RGB', (w, h), (255, 255, 255)) draw = ImageDraw.Draw(img) draw.line((0, h/2, 10, h/2), fill = (255, 0, 0)) drawnode(draw, clust, 10, (h/2), scaling, labels) img.save(jpeg, 'JPEG')def drawnode(draw, clust, x, y, scaling, labels): if clust.id &lt; 0: h1 = getheight(clust.left)*20 h2 = getheight(clust.right)*20 top = y - (h1 + h2)/2 bottom = y + (h1 + h2)/2 l1 = clust.distance * scaling draw.line((x, top + h1/2, x, bottom - h2/2), fill = (255, 0, 0)) draw.line((x, top + h1/2, x + l1, top + h1/2), fill = (255, 0, 0)) draw.line((x, bottom - h2/2, x + l1, bottom - h2/2), fill = (255, 0, 0)) drawnode(draw, clust.left, x + l1, top + h1/2, scaling, labels) drawnode(draw, clust.right, x + l1, bottom - h2/2, scaling, labels) else: draw.text((x + 5, y - 7), labels[clust.id], (0, 0, 0)) 输入以下命令，就可以看到最终的博客聚类情况的树状图：1234&gt;&gt;&gt; import clusters&gt;&gt;&gt; words, blognames, data = clusters.readfile('blogdata.txt')&gt;&gt;&gt; clust = clusters.hcluster(data)&gt;&gt;&gt; clusters.drawdendrogram(clust, blogname, jpeg = 'blogclust'.jpg) $K$- 均值聚类：分级聚类有个缺点就是，我们必须计算每两个配对项之间的关系，并且在合并项之后，这些关系还需要重新计算，所以在处理很大规模的数据集时，分级聚类算法的运行速度会非常缓慢。 而 $K$- 均值聚类，完全不同于分级聚类，因为我们会预先告诉算法希望生成的聚类数量，然后算法会根据数据的结构状况来确定聚类的大小。 $K$- 均值聚类算法首先会随机确定 $k$ 个中心位置（位于空间中代表聚类中心的点），然后将各个数据项分配给最临近的中心点。待分配完成之后，聚类中心就会移到分配给该聚类的所有节点的平均位置处，然后整个分配过程重新开始。这一过程会一直重复下去，直到分配过程不再产生变化为止。 实现 $K$- 均值聚类算法的函数与分级聚类算法的一样，接受相同的数据行作为输入，此外它还接受一个调用者期望返回的聚类数（$k$）作为参数。 12345678910111213141516171819202122232425262728293031323334353637383940def kcluster(rows, distance = pearson, k = 4): # 确定每个点的最小值和最大值 ranges = [(min([row[i] for row in rows]), max([row[i] for row in rows])) for i in range(len(rows[0]))] # 随机创建 k 个中心点 clusters = [[random.random()*(ranges[i][1] - ranges[i][0]) + ranges[i][0] for i in range(len(rows[0]))] for j in range(k)] lastmatches = None for t in range(100): print('Iteration %d' % t) bestmatches = [[] for i in range(k)] # 在每一行中寻找距离最近的中心点 for j in range(len(rows)): row = rows[j] bestmatch = 0 for i in range(k): d = distance(clusters[i], row) if d &lt; distance(clusters[bestmatch], row): bestmatch = i bestmatches[bestmatch].append(j) # 如果结果与上一次相同，则整个过程结束 if bestmatches == lastmatches: break lastmatches = bestmatches # 把中心点移到其所有成员的平均位置处 for i in range(k): avgs = [0.0]*len(rows[0]) if len(bestmatches[i]) &gt; 0: for rowid in bestmatches[i]: for m in range(len(rows[rowid])): avgs[m] += rows[rowid][m] for j in range(len(avgs)): avgs[j] /= len(bestmatches[i]) clusters[i] = avgs return bestmatches 上述代码在每个变量的值域范围内随机构造了一组聚类。当每次迭代进行的时候，算法会将每一行数据分配给某个中心点，然后再将中心点的数据更新为分配给它的所有项的平均位置。当分配情况与前一次相同的时候，迭代过程就结束了，同时算法会返回 k 组序列，其中每个序列代表一个聚类。与分级聚类相比，该算法为产生最终结果所须迭代的次数是非常少的。 由于函数选用随机的中心点作为开始，所以返回结果的顺序几乎总是不同的。根据中心点初始位置的不同，最终聚类中所包含的内容也可能会有所不同。 我们可以针对博客数据集试验一下该函数。算法的执行速度应该会比分级聚类更快一些：123456789&gt;&gt;&gt; import clusters&gt;&gt;&gt; words, blognames, data = clusters.readfile('blogdata.txt')&gt;&gt;&gt; kclust = clusters.kcluster(data, k = 10)&gt;&gt;&gt; [blognames[r] for r in kclust[0]]['Online Marketing Report', "Sifry's Alerts", 'Treehugger', 'Oilman']&gt;&gt;&gt; [blognames[r] for r in kclust[1]]['Mashable!', 'Signum sine tinnitu--by Guy Kawasaki', 'TechCrunch']&gt;&gt;&gt; [blognames[r] for r in kclust[2]]["The Superficial - Because You're Ugly", 'Wonkette', 'Eschaton', 'we make money not art', 'Joho the Blog', "Neil Gaiman's Journal", 'Signal vs. Noise', 'lifehack.org', 'Kotaku', 'Daily Kos', 'Deadspin', 'Go Fug Yourself', 'Gizmodo', 'Gothamist', 'The Viral Garden', 'SpikedHumor', 'flagrantdisregard', 'Techdirt', 'Schneier on Security', 'Scobleizer - Tech Geek Blogger', 'Little Green Footballs', "Dave Shea's mezzoblue", 'kottke.org', 'MetaFilter', 'ongoing', 'Instapundit.com', "Joi Ito's Web", 'Joel on Software', 'PerezHilton.com', 'Derek Powazek', "Jeremy Zawodny's blog", 'plasticbag.org', 'Gawker', 'WWdN: In Exile', "Seth's Blog", 'The Huffington Post | Raw Feed'] 现在，kclust 中应该包含了一组代表聚类的 ID 序列。kclust 应该是一个这样的东西： [[rowid_1,rowid_2,…,rowid_n]_{(聚类_1)} ,[rowid_1,rowid_2,...,rowid_n]_{(聚类_2)} ,...,[rowid_1,rowid_2,...,rowid_n]_{(聚类_k)}]$K$- 均值聚类的最佳特质就是各簇在本质上呈紧致的球状分布，且总会收敛到某个解： $K$- 均值聚类中的距离度量方式除了上述的皮尔逊相关系数，针对具体任务（不同的数据集）可以采用不同的距离度量方式。但是 $K$- 均值聚类算法的缺陷是各簇之间必须存在一个“硬”边界，这意味着每个数据点只能属于一个簇，无法跨越两个簇之间的界限。此外，$K$- 均值聚类算法适合于呈球状分布的数据，因为大多数情况下人们采用的都是欧式距离。在像上述图中这样的数据分布（位于中间的那些点实际上可以属于两个簇的任意一个），这些缺陷非常明显。 针对偏好的聚类：直接使用 zebo.txt 数据集，虽然书上的网站无法访问导致我们无法构建数据集。但是其中使用 BeautifulSoup 这一函数库，以及其中对于网页内容的处理，我们可以学习一下代码。12345678910111213141516171819202122232425262728293031323334353637383940414243444546from BeautifulSoup import BeautifulSoupimport urllib2import redef fuck(): chare = re.compile(r'[!-\.&amp;]') itemowners = &#123;&#125; # 想要去除的单词 dropwords = ['a', 'new', 'some', 'more', 'my', 'own', 'the', 'many', 'other', 'another'] currentuser = 0 for i in range(1, 51): # 搜索想要的对应 URL c = urllib2.urlopen( 'http://member.zebo.com/Main?event_key=USERSEARCH&amp;wiowiw=wiw&amp;keyword=car&amp;page=%d' % (i)) soup = BeautifulSoup(c.read()) for td in soup('td'): # 寻找带有 bgverdanasmall 类的表格单元格 if ('class' in dict(td.attrs) and td['class'] == 'bgverdanasmall'): items = [re.sub(chare, '', str(a.contents[0]).lower()).strip() for a in td('a')] for item in items: # 去除多余的单词 txt = ' '.join([t for t in item.split(' ') if t not in dropwords]) if len(txt) &lt; 2: continue itemowners.setdefault(txt, &#123;&#125;) itemowners[txt][currentuser] = 1 currentuser += 1 out = file('zebo.txt', 'w') out.write('Item') for user in range(0, currentuser): out.write('\tU%d' % user) out.write('\n') for item, owners in itemowners.items(): # 寻找超过 10 个人都希望拥有的物品 if len(owners) &gt; 10: out.write(item) for user in range(0, currentuser): if user in owners: out.write('\t1') else: out.write('\t0') out.write('\n') fuck() 其中 range(1, 51) 表示我们会处理其中的前五十个页面，当然我们也可以自定义。 由于所有的物品的文字都是随意输入的，所以需要进行大量的处理工作，其中包括去除像 dropwords 中“a”、“some”、“new”等这样的单词，去除 chare 标点符号，以及将所有文本转换成小写。 在 zebo.txt 文件当中，如果一个人希望拥有某件物品，那么我们将其标记为 1，否则就标记为 0。皮尔逊相关度很适合于博客数据集，改数据集中所包含的是单词的实际统计值。而在此处，数据集只有 1 和 0 两种取值，分别代表着有或无。并且，假如我们对同时希望拥有两件物品的人在物品方面互有重叠的情况进行度量，那或许是一件更有意义上的事情。 为此，我们采用一种被称为 Tanimoto 系数 的度量方法，它代表的是交集（只包含那些在两个集合中都出现的项）与并集（包含所有出现于任一集合中的项）的比率。 123456789def tanimoto(v1, v2): c1, c2, shr = 0, 0, 0 for i in range(len(v1)): if v1[i] != 0: c1 += 1 if v2[i] != 0: c2 += 1 if v1[i] != 0 and v2[i] != 0: shr += 1 return 1.0 - (float(shr)/(c1 + c2 - shr)) 上述代码将返回一个介于 1.0 和 0.0 之间的值。其中 1.0 代表不存在同时喜欢两件物品的人，而 0.0 则代表所有人都同时喜欢两个向量中的物品。 因为数据的格式与先前所用的相同，所以我们可以利用同样的函数来生成和绘制分级聚类。利用上面的函数并相应传入两个向量，我们很容易就可以实现聚类的功能。12345&gt;&gt;&gt; import clusters&gt;&gt;&gt; users, items, data = clusters.readfile('zebo.txt')&gt;&gt;&gt; clust = clusters.hcluster(data)&gt;&gt;&gt; clust = clusters.hcluster(data, distance = clusters.tanimoto)&gt;&gt;&gt; clusters.drawdendrogram(clust, items, jpeg = 'itemsclusters.jpg') 多维缩放：由于在大多数真是生活的例子中，我们所要聚类的内容都不只包含两个数值，所以我们不可能按照前面的方法来采集数据并以二维的形式将其绘制出来。但是为了要弄明白物品之间的关系，将它们绘制在一个二维的平面上，两两之间的距离远近表达的是两者之间的相似程度。而 多维缩放 目的就是根据每对数据项之间的相似情况，将其表现在一个二维平面上。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748def scaledown(data, distance = pearson, rate = 0.01) : n = len(data) # 每一对数据项之间的真实距离 realdist = [[distance(data[i], data[j]) for j in range(n)] for i in range(0, n)] # 随机初始化节点在二维空间中的初始位置 loc = [[random.random(), random.random()] for i in range(n)] fakedist = [[0.0 for j in range(n)] for i in range(n)] lasterror = None for m in range(0, 1000) : # 寻找投影后的距离 for i in range(n): for j in range(n): fakedist[i][j] = sqrt(sum([pow(loc[i][x] - loc[j][x], 2) for x in range(len(loc[i]))])) # 移动节点 grad = [[0.0, 0.0] for i in range(n)] totalerror = 0 for k in range(n): for j in range(n): if j == k: continue # 误差值等于目标距离与当前距离之间差值的百分比 errorterm = (fakedist[j][k] - realdist[j][k]) / realdist[j][k] # 每个节点都需要根据误差的多少，按照比例移离或者移向其他节点 # point in proportion to how much error it has grad[k][0] += ((loc[k][0] - loc[j][0]) / fakedist[j][k]) * errorterm grad[k][1] += ((loc[k][1] - loc[j][1]) / fakedist[j][k]) * errorterm # 记录总的误差值 totalerror += abs(errorterm) print totalerror # 如果节点移动之后的情况变得更糟，则 break 程序结束 if lasterror and lasterror &lt; totalerror: break lasterror = totalerror # 根据 rate 参数与 grad 值相乘的结果，移动每一个节点 for k in range(n): loc[k][0] -= rate * grad[k][0] loc[k][1] -= rate * grad[k][1] return loc 根据 scaledown()函数得到的 loc，我们可以利用 PIL 在生成一张二维图，根据新的坐标值 loc，在图上标出所有数据项的位置以及对应的标签。12345678def draw2d(data, labels, jpeg='mds2d.jpg'): img = Image.new('RGB', (2000, 2000), (255, 255, 255)) draw = ImageDraw.Draw(img) for i in range(len(data)): x = (data[i][0] + 0.5)*1000 y = (data[i][1] + 0.5)*1000 draw.text((x, y), labels[i], (0, 0, 0)) img.save(jpeg, 'JPEG') 在命令行中输入：1234&gt;&gt;&gt; import clusters&gt;&gt;&gt; words, blognames, data = clusters.readfile('blogname.txt')&gt;&gt;&gt; coords = clusters.scaledown(data)&gt;&gt;&gt; clusters.draw2d(coords, blognames, jpeg = 'blogs2d.jpg') 得到的 blog2d.jpg 反映就是博客数据集中 blog 之间的相似关系，当然我们也可以通过 rotatematrix()函数来转置矩阵 data，得到 rdata，再根据 rdata 画出单词表中的单词的相似度（误差有点大）：12345&gt;&gt;&gt; import clusters&gt;&gt;&gt; words, blognames, data = clusters.readfile('blogname.txt')&gt;&gt;&gt; rdata = clusters.rotatematrix(data)&gt;&gt;&gt; coords = clusters.scaledown(rdata)&gt;&gt;&gt; clusters.draw2d(coords, words, jpeg = 'words2d.jpg') 即得到单词之间的相似关系words2d.jpg。 同样，我们可以将其用于我们的欲望物品数据集，距离度量使用 tanimoto 系数，但是要修改tanimoto() 与scaledown()几处代码，即需要判断分母为 0 的时候的返回值。修改完之后，调用 scaledown()与 draw2d()，画出欲望物品之间的相似关系图items2d.jpg。（同样也可以通过转置 data 矩阵，画出用户之间的相似关系图users2d.jpg）1234&gt;&gt;&gt; import clusters&gt;&gt;&gt; users, items, data = clusters.readfile('zebo.txt')&gt;&gt;&gt; coords = clusters.scaledown(rdata, distance = tanimoto)&gt;&gt;&gt; clusters.draw2d(coords, items, jpeg = 'items2d.jpg') 当然，我们还可以根据需要修改 rate 等诸多参数的值来调整算法，在此不再赘述。 EM 聚类：EM 聚类算法的重点不是像 K- 均值聚类那样找到一个质心，然后找到与其相关的数据点，而是求解另一个不同的问题。比如我们希望一个数据集分为两部分：簇 1 与簇 2。EM 聚类算法的目的是，我们希望得到一个关于数据是否存在某个簇中的良好估计，但并不用关心其中是否存在模糊性。我们真正希望获得的是一个数据点属于各簇的概率值，而非分配结果。 与专注于确定各簇之间边界的 $K$- 均值聚类算法不同，EM 聚类对于可能同属于多个簇的数据点具有一定的稳健性。EM 聚类算法非常适用于对不存在明确边界的数据进行分类。 Correct errors in printing: P46 …代码首先会构造一个列表，其中包含的是超过 5 个人都希望拥有的物品…. 需要更正为： …代码首先会构造一个列表，其中包含的是超过 10 个人都希望拥有的物品…. Practice: 暂无]]></content>
      <categories>
        <category>Machine Learning</category>
        <category>Book:「Programming Collective Intelligence」</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[♞「Programming Collective Intelligence」 Chapter 1 & 2]]></title>
    <url>%2F2016%2F03%2F12%2F%3CProgramming%20Collective%20Intelligence%3E%20Chapter%201%20%26%202%2F</url>
    <content type="text"><![CDATA[关于该书的其他学习笔记系列：「Programming Collective Intelligence」 Related 欧几里得距离评价 皮尔逊相关度评价 The formula for this is more complicated than the Euclidean distance score, but it tends to give better results in situations where the data isn’t well normalized—for example, if critics’ movie rankings are routinely more harsh than average. 它相比于欧几里德距离评价更加复杂，但其在数据不是很规范的时候（比如，影评者对影片的评价总是相对于平均水平偏离很大的时候），会给出更好的结果。 If one critic is inclined to give higher scores than the other, there can still be perfect correlation if the difference between their scores is consistent. The Euclidean distance score described earlier will say that two critics are dissimilar because one is consistently harsher than the other, even if their tastes are very similar. 如果某人总是倾向于给出比另一个人更高的分值，而两者的分值之差又始终保持一致，则他们依然可能会存在很好的相关性。而欧几里德距离评价会因为一个人的评价之中比另外一个人的更为“严格”（从而导致评价始终相对偏低），从而得出两者不相近的结论，即使他们的品位很相似也是如此。 其他相似度计算函数（Minkowski 距离、Mahalanobis 距离等） Key:在「推荐物品」的模块中，提到了一种方法： 通过函数找出与自己有相似品味的影评者，并按相似度从大到小排序。 对于自己未看过的影片，建立一张表，表的内容包括：品位相似的影评者以及其对应的相似度，对于自己未看过影片的评分（影评者可以看过也可以没有看过）。 对于某一个未看过的电影，影评者的相似度（可理解为权值，不同评论者的权值不同，相似度越高，权值越高）乘以其对该电影的评分，其他影评者也得到一个值（如果没有看过，则为零），然后累加，记为其他影评者对于该电影者的评价总和，之后总和需要除以所有对该电影评过分的影评者的相似度之和。 最后得到的结果，表示为自己对于没有看过的电影，通过自己品位相似的影评者得到的预测评分，根据预测评分，来给出决策。 Need to know:在「构建一个基于 del.icio.us 的链接推荐系统」的模块中：首先我们需要下载 pydelicious 这一个 package。［这个 package 不支持 python3.x］ 我的尝试： 通过 Pycharm 自带的“便利”package 下载。出错，原因：无法找到对应的版本。 通过命令行输入sudo pip install pydelicious。出错，原因：Could not find a version that satisfies the requirement pydelicious (from versions:)No matching distribution found for pydelicious。 通过命令行输入sudo pip install pydelicious --allow-external pydelicious --allow-unverified pydelicious。出错，原因：Could not find a version that satisfies the requirement pydelicious (from versions:)No matching distribution found for pydelicious。 初次尝试失败之后，在 Stackoverflow 寻找解决办法： 首先，按照书本提供的下载地址：the pydelicious download page［需要翻墙］下载 pydelicious-0.5.0.zip 文件。解压之后得到文件夹。 命令行 cd 到解压后的文件夹，然后输入 sudo python setup.py install，错误提示：Feedparser not available, no RSS parsing。 意思是缺少 feedparser 这一 package 依赖库，需要安装 feedparser。 安装 feedparser, 下载地址：the feedparser download page［需要积分］，或者the feedparser download page［需要翻墙］，下载文件夹。 命令行 cd 到 feedparser 的文件夹，然后输入sudo python setup.py install，feedparser 安装完成。 命令行 cd 回到 pydelicious 文件夹，再次输入sudo python setup.py install，此时会发现 pydelicious 安装成功。 测试 pydelicious 此 package 是否能够导入，命令行输入 python 之后，再输入import pydelicious，如果没有报错，这说明 pydelicious 安装成功。 2016.11.28 补充：如果按照书本上下载的 pydelicious-0.5.0 版本，是可以正常运行书本上的代码的而不报错的，但是会出现无论我如何修改 tag 的值，返回的内容都是一样的，原因在后面解释了。但是如果我们下载的是 github 上更新后的 pydelicious 版本，会遇到如下问题，解决办法是需要修改__init__.py 文件中的几处代码，但是仍然会出现 tag 值的问题。 本以为问题得到了解决，可以按照书上的代码继续进行: 123$ python&gt;&gt;&gt; import pydelicious&gt;&gt;&gt; pydelicious.get_popular(tag='python') 此时会报错，无论是否翻墙，显示获取失败。 我在 stackoverflow.com 上找到了原因：the answer［需要翻墙］仔细看提问者的问题，重点是后面提出解决办法的几个回答。 You should modify the __init__.py to:rss =http_request(‘http://feeds.delicious.com/v2/rss‘) .read() 所以解决的办法是：打开 pydelicious 的文件夹，找到子文件夹 pydelicious 下的 __init__.py 文件，修改三处地方： DLCS_RSS = ‘http://feeds.delicious.com/v2/rss/‘ rss = http_request(‘http://feeds.delicious.com/v2/rss‘). read() def get_popular(tag =””):return getrss(tag = tag, popular =0) 命令行 cd 到 pydelicious 安装总文件夹，重新输入sudo python setup.py install。 123$ python&gt;&gt;&gt; import pydelicious&gt;&gt;&gt; pydelicious.get_popular(tag='python') 此时会发现成功获取到了内容（注意检查网络，如果仍然无法获取，记得翻墙）。 本以为到此终于告一段落，但是实际上： 123&gt;&gt;&gt; import pydelicious&gt;&gt;&gt; pydelicious.get_popular(tag='python')&gt;&gt;&gt; pydelicious.get_popular(tag='xxx') 意思是无论我如何更改参数 tag 的值，返回的内容会发现是一样。这个问题，stackoverflow 老外也同样遇到了： I see the resource code again. Maybe it is wrong. Because If you edit the code, the procedural answer always remain unchanged…I’m studing… 我个人觉得可能是 DLCS_RSS 的网址还需要更改一下（因为这本书在刚出来的时候，pydelicious 还是支持原 del.icio.us 的网站，是不需要去更改 __init__.py 的文件等，后来是 unspported，所以需要更改 __init__.py 文件中的 RSS 订阅源，也许可能这个订阅源还不是最新的，反正是坑…），或者说是 get_popular() 这个 function 有误（这个不太可能），总而言之，折腾了一下晚上，感觉是遇到了坑，不过好歹也算是解决出来了。 貌似有 deliciousapi 这个 package 作为替代，我也尝试过，但运行说明文档中的几个函数，发现会报错，希望如果有人知道如何用 deliciousapi 替代 pydelicious 完成第二章后续的几个模块，请务必告诉我！ 注意：新手实践这本书的时候，完全可以跳过这个坑，因为没有必要，只需要 get 第二章几个重要的算法或者是思想就可以了。 Correct errors in printing: P13 12# 如果两者没有共同之处，则返回 1if n==0: return 1 需要更正为： 12# 如果两者没有共同之处，则返回 0if n==0: return 0 Practice: 暂无]]></content>
      <categories>
        <category>Machine Learning</category>
        <category>Book:「Programming Collective Intelligence」</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Machine Learning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[「Web Scraping 」smtplib & email module]]></title>
    <url>%2F2015%2F12%2F13%2F%3CWeb%20Scraping%20with%20Python%3E%20Other-smtplib%20%26%20email%2F</url>
    <content type="text"><![CDATA[Related smtplib module email module smtplib module使用 python 脚本发邮件，一般会用到 smtplib 和 email 这两个模块。smtplib 模块定义了一个简单的 SMTP 客户端，可以用来在互联网上发送邮件。参考下面的程序： 1234567891011121314151617181920212223242526272829303132333435363738394041424344from email.header import Headerfrom bs4 import BeautifulSoupimport smtplibimport timemail_host = 'smtp.gmail.com' # 设置服务器mail_port = 587 # 服务器端口号mail_user = 'your_username@gmail.com' # 用户名mail_pass = 'your_password' # 口令sender = 'your_username@gmail.com'receivers = 'your_other_username@hotmail.com'# fill content with MIMEText's objectmsg = MIMEText('Hi, I am Randolph.')msg['From'] = sendermsg['To'] = receiversmsg['Subject'] = 'Hello, today is a special day.'print(msg.as_string())# connecttry: print("Connecting ...") smtpObj = smtplib.SMTP(mail_host, mail_port)except: print("CONNECT ERROR ****")# show the debug logsmtpObj.set_debuglevel(1)# gmail uses sslsmtpObj.ehlo()smtpObj.starttls()smtpObj.ehlo()# login with username &amp; passwordtry: print("Loginning ...") smtpObj.login(mail_user, mail_pass)except: print("LOGIN ERROR ****")smtpObj.sendmail(sender, receivers, msg.as_string())smtpObj.quit() smtp 实例封装一个 smtp 连接，它支持所有的 SMTP 和 ESMTP 操作指令，如果 host 和 port 参数被定义，则 smtp 会在初始化期间自动调用 connect() 方法，如果 connect() 方法失败，则会触发 SMTPConnectError 异常，timeout 参数设置了超时时间。在一般的调用过程中，应该遵 connect()、sendmail()、quit()步骤。 SMTP 模块主要方法 下面我们来看看该类的方法： smtp.set_debuglevel(level)设置输出 debug 调试信息，默认不输出调试信息。 smtp.docmd(cmd, argstring)发送一个 command 到 smtp 服务器， smtp.connect(host, port)连接到指定的 smtp 服务器，默认是本机的 25 端口。也可以写成 hostname:port 的形式。 smtp.helo(hostname)使用 helo 指令向 smtp 服务器确认你的身份。 smtp.ehlo(hostname)使用 ehlo 指令向 esmtp 服务器确认你的身份。 smtp.ehlo_or_helo_if_needed()如果在以前的会话连接中没有提供 ehlo 或者 helo 指令，这个方法调用 ehlo() 或者 helo()。 smtp.has_extn(name)判断指定的名称是否在 smtp 服务器上。 smtp.verify(address)判断邮件地址是否在 smtp 服务器上存在。 smtp.login(user, password)登陆需要验证的 smtp 服务器，如果之前没有提供 ehlo 或者 helo 指令，则会先尝试 ESMTP 的 ehlo 指令。 smtp.starttls(keyfile, certfile)使 smtp 连接运行在 TLS 模式，所有的 smtp 指令都会被加密。 smtp.sendmail(from_addr, to_addrs, msg, mail_options, rcpt_options)发送邮件，该方法需要一些邮件地址和消息。 smtp.quit()终止 smtp 会话并且关闭连接。 email module如果想在邮件中携带附件, 使用 html 书写邮件，附带图片等等，就需要使用 email 模块及其子模块。下面来看看 email 包，email 包是用来管理 email 信息的，它包括 MIME 和其他基于 RFC 2822 的消息格式。email 包的主要特征是在它内部解析和生成 email 信息是分开的模块来实现的。 MIME 消息由消息头和消息体两大部分组成，在邮件里就是邮件头和邮件体。邮件头与邮件体之间以空行进行分隔。 邮件头包含了发件人、收件人、主题、时间、MIME 版本、邮件内容的类型等重要信息。每条信息称为一个域，由域名后加 “ : ” 和信息内容构成，可以是一行，较长的也可以占用多行。域的首行必须“顶头”写，即左边不能有空白字符（空格和制表符）；续行则必须以空白字符打头，且第一个空白字符不是信息本身固有的。 邮件体包含邮件的内容，它的类型由邮件头的 “Content-Type” 域指出。最常见的类型有 text/plain(纯文本) 和 text/html(超文本)。邮件体被分为多个段，每个段又包含段头和段体两部分，这两部分之间也以空行分隔。常见的 multipart 类型有三种：multipart/mixed, multipart/related 和 multipart/alternative。 在 email 的包里面包含了很多模块： email.message email.parser email.generator email.mime (创建 email 和 MIME 对象) email.header email.charset email.encoders email.errors email.utils email.iterators 主要来看看 email.mime，在邮件中携带附件、图片、音频时，主要使用的是该模块。一般情况下，你通过解析一个文件或者一段 text 来生成一个消息对象结构，你也可以从头开始建立一个消息结构，实际上，你可以给一个已经存在的消息结构追加一个新的消息对象。你可以通过创建 message 实例来创建一个对象结构，然后给该结构追加附件和头部信息。email 包提供了一些子类使得该操作变得很容易。 模拟在邮件内容中携带图片，代码如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455from email.mime.text import MIMETextfrom email.mime.multipart import MIMEMultipartfrom email.mime.image import MIMEImagefrom email.message import Messageimport email.utilsimport smtplibimport timeimport smtplibimport base64mail_host = 'smtp.gmail.com' # 设置服务器mail_port = 587 # 服务器端口号mail_user = 'your_username@gmail.com' # 用户名mail_pass = 'your_password' # 口令sender = 'your_username@gmail.com'receivers = 'your_other_username@hotmail.com'# send email with images use MIMEMultipart's objectmsg = MIMEMultipart()msg['From'] = sendermsg['To'] = receiversmsg['Subject'] = 'An email with a image.'body = 'Test image send.'con = MIMEText('&lt;b&gt;%s&lt;/b&gt;![](cid:/Users/xxx/xxx/xxx.jpg)' % body, 'html')msg.attach(con)img = MIMEImage(open('/Users/xxx/xxx/xxx.jpg', 'rb').read())img.add_header('Content-ID', '/Users/xxx/xxx/xxx.jpg')msg.attach(img)# connecttry: print("Connecting ...") smtpObj = smtplib.SMTP(mail_host, mail_port)except: print("CONNECT ERROR ****")# show the debug logsmtpObj.set_debuglevel(1)# gmail uses sslsmtpObj.ehlo()smtpObj.starttls()smtpObj.ehlo()# login with username &amp; passwordtry: print("Loginning ...") smtpObj.login(mail_user, mail_pass)except: print("LOGIN ERROR ****")smtpObj.sendmail(sender, receivers, msg.as_string())smtpObj.quit() Send email with attachment发送带附件的邮件，首先要创建 MIMEMultipart() 实例，然后构造附件，如果有多个附件，可依次构造，最后利用 smtplib.smtp 发送。 模拟在邮件中携带附件，代码如下：1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465from email.mime.text import MIMETextfrom email.mime.multipart import MIMEMultipartfrom email.mime.image import MIMEImagefrom email.message import Messageimport email.utilsimport smtplibimport timeimport smtplibimport base64mail_host = 'smtp.gmail.com' # 设置服务器mail_port = 587 # 服务器端口号mail_user = 'your_username@gmail.com' # 用户名mail_pass = 'your_password' # 口令sender = 'your_username@gmail.com'receivers = 'your_other_username@hotmail.com'# send email with attachmentmsg = MIMEMultipart()txt = MIMEText("我这半世未算赶，何妨迷途看风光.",'plain','gb2312')msg.attach(txt)# 构造附件 1att1 = MIMEText(open('/Users/xxx/xxx/xxx.jpg', 'rb').read(), 'base64', 'gb2312')att1["Content-Type"] = 'application/octet-stream'att1["Content-Disposition"] = 'attachment; filename="xxx.jpg"'# 这里的 filename 可以任意写，写什么名字，邮件中显示什么名字msg.attach(att1)# 构造附件 2att2 = MIMEText(open('/Users/xxx/xxx/xxx.doc', 'rb').read(), 'base64', 'gb2312')att2["Content-Type"] = 'application/octet-stream'att2["Content-Disposition"] = 'attachment; filename="xxx.doc"'msg.attach(att2)# 加邮件头msg['to'] = sendermsg['from'] = receiversmsg['subject'] = 'Test.'# connecttry: print("Connecting ...") smtpObj = smtplib.SMTP(mail_host, mail_port)except: print("CONNECT ERROR ****")# show the debug logsmtpObj.set_debuglevel(1)# gmail uses sslsmtpObj.ehlo()smtpObj.starttls()smtpObj.ehlo()# login with username &amp; passwordtry: print("Loginning ...") smtpObj.login(mail_user, mail_pass)except: print("LOGIN ERROR ****")smtpObj.sendmail(sender, receivers, msg.as_string())smtpObj.quit()]]></content>
      <categories>
        <category>Web Scraping</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Web Scraping</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[♞「Web Scraping with Python」 Chapter 4 & 5]]></title>
    <url>%2F2015%2F11%2F27%2F%3CWeb%20Scraping%20with%20Python%3E%20Chapter%204%20%26%205%2F</url>
    <content type="text"><![CDATA[关于该书的其他学习笔记系列：「Web Scraping with Python」 Related Parsing JSON Storing Data to CSV Integrating with Python &amp; MySQL Key：Parsing JSON? Python uses a more flexible approach and turns JSON objects into dictionaries, JSON arrays into lists, JSON strings into strings, and so forth. In this way, it makes it extremely easy to access and manipulate values stored in JSON. Python 使用了一种更加灵活的方式来处理 JSON，把 JSON 转换成字典，JSON 数组转换成列表，JSON 字符串转换成 Python 字符串。通过这种方式，就可以让 JSON 的获取和操作变得更加简单。 下面的程序对维基百科的编辑历史页面里面的 IP 地址找出来，并查询 IP 地址所属的国家和地区： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849from urllib.request import urlopenfrom urllib.request import HTTPErrorfrom bs4 import BeautifulSoupimport datetimeimport jsonimport randomimport rerandom.seed(datetime.datetime.now())def getLinks(article_url): html = urlopen("http://en.wikipedia.org"+article_url) bsObj = BeautifulSoup(html.read(),"html5lib") return bsObj.find("div",&#123;"id":"bodyContent"&#125;).findAll("a",href=re.compile("^(/wiki/)((?!:).)*$"))def getHistoryIPs(page_url): # http://en.wikipedia.org/w/index.php?title=Title_in_URL&amp;action=history page_url = page_url.replace("/wiki/","") history_url = "http://en.wikipedia.org/w/index.php?title=" + page_url + "&amp;action=history" print("history url is: " + history_url) html = urlopen(history_url) bsObj = BeautifulSoup(html.read(),"html5lib") # finds only the links with class"mw-anonuserlink"which has IP addresses instead of usernames ipAddresses = bsObj.findAll("a", &#123;"class":"mw-anonuserlink"&#125;) addressList = set() for ipAddresses in ipAddresses: addressList.add(ipAddresses.get_text()) return addressListdef getCountry(ipAddress): try: response = urlopen("http://freegeoip.net/json/" + ipAddress).read().decode('utf-8') except HTTPError: return None responseJson = json.loads(response) return responseJson.get("country_code")links = getLinks("/wiki/Python_(programming_language)")while(len(links) &gt; 0): for link in links: print("----------------") historyIPs = getHistoryIPs(link.attrs["href"]) for historyIP in historyIPs: country = getCountry(historyIP) if country is not None: print(historyIP + "is from " + country) newLink = links[random.randint(0,len(links)-1)].attrs["href"] links = getLinks(newLink) Download Page Source 下面的程序将 http://pythonscraping.com 主页上所有 src 属性的文件都下载下来，然后对 URL 链接进行清理和标准化，获得文件对绝对路径（而且去掉了外链）。最后，每个文件都会下载到程序所在文件夹到 downloaded 文件里： 12345678910111213141516171819202122232425262728293031323334353637383940414243from urllib.request import urlretrievefrom urllib.request import urlopenfrom bs4 import BeautifulSoupimport osdownload_directory = "downloaded"base_url = "http://pythonscraping.com"def getAbsolute_url(base_url,source): if source.startswith("http://www."): url = "http://" + source[11:] elif source.startswith("http://"): url = source elif source.startswith("www."): url = source[4:] url = "http://" + source else: url = base_url + "/" + source if base_url not in url: return None return urldef getDownloadPath(base_url, absolute_url, download_directory): path = absolute_url.replace("www","") path = path.replace(base_url,"") path = download_directory + path directory = os.path.dirname(path) if not os.path.exists(directory): os.makedirs(directory) return pathhtml = urlopen("http://www.pythonscraping.com")bsObj = BeautifulSoup(html.read(),"html5lib")downloadList = bsObj.findAll(src=True)for download in downloadList: file_url = getAbsolute_url(base_url, download["src"]) if file_url is not None: print(file_url)urlretrieve(file_url,getDownloadPath(base_url,file_url,download_directory)) Storing Data to CSV CSV, or comma-separated values, is one of the most popular file formats in which to store spreadsheet data. It is supported by Microsoft Excel and many other applica‐ tions because of its simplicity. The following is an example of a perfectly valid CSV file: 1234fruit,costapple,1.00banana,0.30pear,1.25 网络数据采集的一个常用功能就是获取 HTML 表格并写入 CSV 文件。 Need to Know：MySQLThe download page 下载 .dmg 安装包，在 MySQL5.7.x 版本之后，安装的时候会随机分配一个初始密码！这非常重要，例如 root@localhost: ;,aLs&amp;%%4ziE 密码很复杂，最好先复制下来，等会更改密码的时候需要用到。 安装完成之后，可以在系统偏好设置中看到多出了一个 MySQL，我们可以通过其来开关 MySQL 服务器，当然我们可以通过命令行输入来控制。 打开服务器，在命令行输入： 12$ alias mysql=/usr/local/mysql/bin/mysql$ alias mysqladmin=/usr/local/mysql/bin/mysqladmin ps: 注意，这上面 alias 别名的方法，只是一次性的，意味着我们关闭了终端之后再开，命令行直接输入 mysql 或者 mysqladmin 就无效了。如果需要长期有效，需要修改文件，让终端启动的时候加载。 12$ cd ~$ vim ./bash_profile 注意：如果你安装了 oh-my-zsh，需要去更改 .zshrc 文件。 然后更改密码，命令行输入： 1$ mysqladmin - u root -p password xxx(我们需要的新密码) 确保 MySQL 服务器打开，然后命令输入： 1$ mysql -u root -p 若未显示错误，则表示连接上数据库了 Integrating with PythonPython 没有内置的 MySQL 支持工具。不过，有很多开源的库可以用来与 MySQL 做交互，Python2.x 和 Python3.x 版本都支持。最有名的一个库就是 PyMySQL。 我是在 PyCharm 直接安装 PyMySQL，安装完成之后，如果我们的 MySQL 的服务器处于运行状态，应该就可以使用 PyMySQL 包。 123456&gt;&gt;&gt; import pymysql.conn = pymysql.connect(host='127.0.0.1', unix_socket='/tmp/mysql.sock', user='root', passwd='xxxx', db='mysql')&gt;&gt;&gt; cur = conn.cursor()&gt;&gt;&gt; cur.execute("USE scraping")&gt;&gt;&gt; cur.execute("SELECT * FROM pages WHERE id=1") &gt;&gt;&gt; print(cur.fetchone())cur.close().conn.close() 程序中有两个对象：连接对象 conn 和光标对象 cur。 连接 / 光标模式是数据库编程中常见的模式。连接模式除了要连接数据库之外，还要发送数据库信息，处理回滚操作（当一个查询或一组查询被中断时，数据库需要回到初始状态，一般用事务控制手段实现状态会滚），创建新的光标对象，等等。 而一个 conn 可以有很多个 cur。一个光标跟踪一种状态信息，比如跟踪数据库的使用状态。如果你有多个数据库，且需要向所有数据库写内容，就需要多个光标来处理。光标还包含最后一次查询执行的结果。通过调用光标函数，比如 cur.fetchone()，可以获取查询结果。 用完光标和链接之后，千万记得要把它们关闭。如果不关闭就会导致连接泄漏（connection leak），造成一种未关闭连接的现象，即连接已经不在使用，但是数据库却不能关闭，因为数据库不能确定你还要不要继续使用它。这种现象会一直耗费数据库的资源，所以用完数据库之后记得关闭连接！ 进行网络数据采集的时候，处理 Unicode 字符串是很痛苦的事情。默认情况下，MySQL 也不支持 Unicode 字符处理。不过我们可以设置这个功能，因为采集的时候，我们难免会遇到各种各样的字符，所以最好一开始就让我们的数据库支持 Unicode： 1234ALTER DATABASE scraping CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci; ALTER TABLE pages CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; ALTER TABLE pages CHANGE title title VARCHAR(200) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; ALTER TABLE pages CHANGE content content VARCHAR(10000) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; 我们尝试用下面的程序来存储数据： 1234567891011121314151617181920212223242526272829303132333435363738from urllib.request import urlopenfrom bs4 import BeautifulSoupimport reimport datetimeimport randomimport pymysqlconn = pymysql.connect(host='127.0.0.1', unix_socket='/tmp/mysql.sock', user='root',passwd='randolph',db='mysql',charset='utf8')cur = conn.cursor()cur.execute("USE scraping")random.seed(datetime.datetime.now())def store(title, content): cur.execute("INSERT INTO pages(title, content) VALUE (\"%s\",\"%s\")",(title,content)) cur.connection.commit()def getLinks(article_url): html = urlopen("http://en.wikipedia.org"+article_url) bsObj = BeautifulSoup(html.read(),"html5lib") title = bsObj.find("h1").get_text() content = bsObj.find("div", &#123;"id":"mw-content-text"&#125;).find("p").get_text() store(title,content) return bsObj.find("div",&#123;"id":"bodyContent"&#125;).findAll("a",href=re.compile("^(/wiki/)(?!:).)*$"))links = getLinks("/wiki/Kevin_Bacon")try: while len(links) &gt; 0: newArticle = links[random.randint(0, len(links)-1)].attrs["href"] print(newArticle) links = getLinks(newArticle)finally: cur.close() conn.close() 需要注意的是 store() 函数，它有两个参数：title 和 content，并把这两个参数加到了一个 INSERT 语句中并用光标执行，然后用光标进行连接确认。这是一个让光标与连接操作分离的好例子；当光标里存储了一些数据库与数据库上下文的信息时，需要通过连接的确认操作先将信息传进数据库，再将信息插入数据库。 最后需要注意的是 finally 语句是在程序主循环的外面，代码的最底下。这样做可以保证，无论程序执行过程中如何发生中断或抛出异常（当然，因为网络很复杂，我们需要随时准备遭遇异常），光标和连接都会在程序结束前立即关闭。无论我们是在采集网络还是在处理一个打开连接的数据库，用 try...finally 都是一个好主意。 Correct errors in printing： 暂无 Practice： 暂无]]></content>
      <categories>
        <category>Web Scraping</category>
        <category>Book:「Web Scraping with Python」</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Web Scraping</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[♞「Web Scraping with Python」 Chapter 3]]></title>
    <url>%2F2015%2F11%2F13%2F%3CWeb%20Scraping%20with%20Python%3E%20Chapter%203%2F</url>
    <content type="text"><![CDATA[关于该书的其他学习笔记系列：「Web Scraping with Python」 Related urlparse module Key：Think First. What data am I trying to gather? Can this be accomplished by scraping just a few predefined websites (almost always the easier option), or does my crawler need to be able to discover new websites I might not know about? 我需要收集哪些数据？这些数据可以通过采集几个已经确定的网站（永远是最简单的做法）完成吗？或者我需要通过爬虫发现那些我可能不知道的网站从而获取我想要的信息吗？ When my crawler reaches a particular website, will it immediately follow the next outbound link to a new website, or will it stick around for a while and drill down into the current website? 当我的爬虫到了某一个网站，它是立即顺着下一个出站链接跳转到下一个新网站，还是在网站上呆一会，深入采集网站的内容？ Are there any conditions under which I would not want to scrape a particular site? Am I interested in non-English content? 有没有我不想采集的一些网站？我对非英文网站的内容感兴趣么？ How am I protecting myself against legal action if my web crawler catches the attention of a webmaster on one of the sites it runs across? 如果我的爬虫引起了某个网站网管的怀疑，我该如何避免法律责任？ urlparse moduleurlparse 模块主要是把 url 拆分为六个部分，并返回元组 tuple。并且可以把拆分后的部分再组成一个 url。主要函数有 urljoin、urlsplit、urlunsplit、urlparse 等。 urlparse function12345678910&gt;&gt;&gt; from urlparse import urlparse&gt;&gt;&gt; o = urlparse('http://www.cwi.nl:80/%7Eguido/Python.html')&gt;&gt;&gt; o ParseResult(scheme='http', netloc='www.cwi.nl:80', path='/%7Eguido/Python.html', params='', query='', fragment='')&gt;&gt;&gt; o.scheme 'http'&gt;&gt;&gt; o.port 80&gt;&gt;&gt; o.geturl() 'http://www.cwi.nl:80/%7Eguido/Python.html' 其将 url 解析成六个部分 （scheme, netloc, path, parameters, query, fragment）。 scrapy Scrapy uses the Item objects to determine which pieces of information it should save from the pages it visits. This information can be saved by Scrapy in a variety of ways, such as a CSV, JSON, or XML files, using the following commands:Scrapy 用 Item 对象决定要从它浏览的页面中提取哪些信息。Scrapy 支持用不同的输出格式来保存这些信息，比如 CSV、JSON、XML 文件格式，对应命令如下： 123$ scrapy crawl article -o articles.csv -t csv$ scrapy crawl article -o articles.json -t json$ scrapy crawl article -o articles.xml -t xml 当然我们也可以自己定义 Item 对象，把结果写入我们需要的一个文件或者数据库中，只要在爬虫的 parse 部分增加相应的代码即可。Scrapy 是处理网络数据采集相关问题的利器。它可以自动收集所有 URL，然后和指定的规则进行比较；确保所有的 URL 是唯一的；根据需求对相关的 URL 进行标准化；以及到更深层的页面中递归查询。 Need to know： 在「用 Scrapy 采集」的模块中： 我们需要下载 scrapy 这一个 package。「 这个 package 不支持 python3.x 和 python2.6，只能使用 python2.7 。」 我的尝试： 123$ sudo pip install scrapyCould not find function xmlCheckVersion in library libxml2. Is libxml2 installed? Perhaps try: xcode-select --install 意思是缺少 libxml2 ，通过命令行输入: 1$ xcode-select --install 接着会弹出 Xcode command line tools 下载，里面包含了 libxml2。安装完成之后，再次尝试 sudo pip install scrapy，报错，内容为: 12&gt;&gt;&gt; from six.moves import xmlrpc_client as xmlrpclibImportError: cannot import name xmlrpc_client 在 stackoverflow 上寻找原因: six.moves is a virtual namespace. It provides access to packages that were renamed between Python 2 and 3. As such, you shouldn’t be installing anything. By importing from six.moves.xmlrpc_client the developer doesn’t have to handle the case where it is located at xmlrpclib in Python 2, and at xmlrpc.client in Python 3. Note that these are part of the standard library. The mapping was added to six version 1.5.0; make sure you have that version or newer. Mac comes with six version 1.4.1 pre-installed in the path: /System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python and this will interfere with any version you install in site-packages (which is listed last in the sys.path). The best work-around is to use a virtualenv and install your own version of six into that, together with whatever else you need for this project. Create a new virtualenv for new projects. If you absolutely have to install this at the system level, then for this specific project you’ll have to remove the /System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python path: 12&gt;&gt;&gt; import sys&gt;&gt;&gt; sys.path.remove('/System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python') This will remove various OS X-provided packages from your path for just that run of Python; Apple installs these for their own needs. Mac 自带的 six 版本过低，scrapy 需要 six 的版本在 1.5.0 以上，建议是采用 Python 虚拟环境，如果真的需要在 system level 上进行更改的话，需要重新安装 six。 于是，我先尝试了其中的一个解决办法： 1234$ sudo rm -rf /Library/Python/2.7/site-packages/six*$ sudo rm -rf /System/Library/Frameworks/Python.framework/Versions/2.7/Extras/lib/python/six*$ sudo pip install six 但很不幸的是，sudo rm -rf 尝试删除文件的时候失败报错，Operation not Permitted。 继续查找原因： This is because OS X El Capitan ships with six 1.4.1 installed already and when it attempts to uninstall it (because scrapy depends on six &gt;= 1.5) it doesn’t have permission to do so because System Integrity Protection doesn’t allow even root to modify those directories. Ideally, pip should just skip uninstalling those items since they aren’t installed to site-packages they are installed to a special Apple directory. However, even if pip skips uninstalling those items and installs six into site-packages we’ll hit another bug where Apple puts their pre-installed stuff earlier in the sys.path than site-packages. I’ve talked to Apple about this and I’m not sure if they’re going to do anything about it or not. 我的 Mac OS X 系统版本为 10.11.4，Mac 自版本 10.11 之后，由于新的 SIP 机制，即使是 root 用户也无法对 /System 中的内容进行修改删除（在系统恢复中可以办到）。 于是，我采用另外一种方法继续尝试： 12$ sudo pip uninstall six$ easy_install six 同样得到的是 Operation not Permitted（此方法在 10.11 之前的版本应该都可以行得通）。 后来尝试了通过 Python 虚拟环境进行解决，能力不够失败。 还尝试了通过下载 Python 官网的 2.7.11，不使用 Mac 系统默认自带的 2.7.10（有人提到使用自己安装的 Python2.7 可以解决问题），折腾了半天，还是失败告终，还差点弄的 pip 无法安装 package。挽救办法为： 12$ brew link python $ bre unlink python 到最后，本来想着要放弃的，Stackoverflow 上的另一个办法让事情有了转机： This is a known issue on Mac OSX for Scrapy. You can refer to this link.Basically the issue is with the PYTHONPATH in your system. To solve the issue change the current PYTHONPATH to point to the newer or none Mac OSX version of Python. Before running Scrapy, try: 1$ export PYTHONPATH=/Library/Python/2.7/site-packages:$PYTHONPATH If that worked you can change the .bashrc file permanently: 1$ echo "export PYTHONPATH=/Library/Python/2.7/site-packages:$PYTHONPATH" &gt;&gt; ~/.bashrc If none of this works, take a look at the link above. 此时命令行输入 python, 之后输入： 1&gt;&gt;&gt; import scrapy 没有报错，说明可以导入 scrapy。 尝试书上的命令： 1$ scrapy startproject wikiSpider 得到信息： 12345New Scrapy project 'wikiSpider' created in: /Users/randolph/PycharmProjects/Scraping/wikiSpiderYou can start your first spider with: cd wikiSpider scrapy genspider example example.com 成功！scrapy is ready to go! Correct errors in printing： 暂无 Practice: 暂无]]></content>
      <categories>
        <category>Web Scraping</category>
        <category>Book:「Web Scraping with Python」</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Web Scraping</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[♞「Web Scraping with Python」 Chapter 1 & 2]]></title>
    <url>%2F2015%2F11%2F02%2F%3CWeb%20Scraping%20with%20Python%3E%20Chapter%201%20%26%202%2F</url>
    <content type="text"><![CDATA[关于该书的其他学习笔记系列：「Web Scraping with Python」 Related BeautifulSoup package Navigating Trees Regular Expression Key：urlib or urlib2? If you’ve used the urllib2 library in Python 2.x, you might have noticed that things have changed somewhat between urllib2 and urllib. In Python 3.x, urllib2 was renamed urllib and was split into several submodules: urllib.request, urllib.parse, and url lib.error. Although function names mostly remain the same, you might want to note which functions have moved to submodules when using the new urllib. 在学习这本书之前，使用过此 package（我一开始学习 Python 就用的是 3.x，Mac 自带 Python2.x），当时出错了，上 Stackoverflow 找到了答案，现在这本书提到了这点，重新回顾一下: 如果你用过 Python 2.x 里的 urllib2 库，可能会发现 urllib2 与 urllib 有些不同。在 Python 3.x 里，urllib2 改名为 urllib，被分成一些子模块：urllib.request、urllib.parse 和 urllib.error。尽管函数名称大多和原来一样，但是在用新的 urllib 库时需要注意哪些函数被移动到子模块里了。 When to get_text() and When to Preserve Tags? .get_text() strips all tags from the document you are working with and returns a string containing the text only. For example, if you are working with a large block of text that contains many hyperlinks, paragraphs, and other tags, all those will be stripped away and you’ll be left with a tagless block of text. Keep in mind that it’s much easier to find what you’re looking for in a BeautifulSoup object than in a block of text. Calling .get_text() should always be the last thing you do, immediately before you print, store, or manipulate your final data. In general, you should try to preserve the tag structure of a document as long as possible. 简而言之，通常在我们准备打印、存储和操作数据的时候，即最后的时候才使用 .get_text()。一般情况下，我们应该尽可能地保留 HTML 文档的标签结构。 find() and findAll() with BeautifulSoup? findAll(tag, attributes, recursive, text, limit, keywords) find(tag, attributes, recursive, text, keywords) 先说结论，再仔细说说参数的用法。find() is equivalent to the same findAll() call, with a limit of 1.find() 其实等价于 findAll() 的 limit 等于 1 时的特殊情况。 tag: 我们可以传一个标签的名称或多个标签名称组成的 Python 列表做标签参数。例如：(”span”, “h1” , {“span”, “h1”}, {“h1”, “h2”, “h3”})。其实就是一个「或」关系的过滤器（即我们可以选择带有 span 或 h1 或 h2 等的一列标签）。 attributes: 这是一个用 Python 字典封装某一标签的若干属性和对应的属性值。例如：{“class”: {“green”, “red”}} recursive: 一般情况下，这个参数不需要设置，除非我们真正了解自己需要哪些信息，而且抓取速度非常重要，因为这个参数会根据我们的要求去查找标签参数的所有子标签，以及子标签的子标签。 limit: 只适用于 findAll() 方法，如果我们只对网页中获取的前 x 项结果感兴趣，我们就可以通过设置 limit 来获取。但是需要注意的是：获得的前几项结果是按照网页上的顺序排序的，未必是我们想要的前几项，所以我们还需要额外做一些自己的排序。 keyword: 使我们选择那些具有制定属性的标签成为可能。 keyword 关键词参数的主意事项：使用 keyword 偶尔会出现问题，尤其是在用 class 属性查找标签的时候，因为 class 是 Python 中受保护的关键字。也就是说，class 是 Python 语言的保留字，在 Python 程序中是不能充当变量或者参数名使用的。假如我们运行下面的代码，Python 就会因为我们误用 class 保留字而产生一个语法错误： bsObj.findAll(class=&quot;green&quot;) 不过 BeautifulSoup 提供了一个解决方案，就是在 class 后面增加一个下划线： bsObj.findAll(class_=&quot;green&quot;)我们也可以使用属性参数来将 class 用引号包起来： bsObj.findAll(&quot;&quot;,{&quot;class&quot;: &quot;green&quot;}) 另外，如果说 tag 参数是相当于一个「或」关系的过滤器，那么 keyword 参数就可以为我们构造一个「与」关系的过滤器来提高我们的工作效率，简化我们的工作。 Navigating Trees如果说 find() 和 findAll() 函数是通过标签的名称和属性来查找标签，那么 Navigating Trees 就是通过标签在文档中的位置来查找标签。 Make Selections Specific To make your scrapers more robust, it’s best to be as specific as pos‐ sible when making tag selections. Take advantage of tag attributes when they are available. 如果想让我们的爬虫更加稳定，最好还是让标签的选择更加具体。如果有属性，就利用标签的属性。 123bsObj.trbsObj.table.trbsObj.find("table",&#123;"id":"giftList"&#125;).tr 上述三行目的都是获取书本上的网站中的表格的第一行。但是我们应该采用最后一条，用更具体的形式来获取，原因很简单，即使页面上只有一个表格（或者其他的目标标签），只用标签也很容易丢失细节。另外，页面的布局总是不断变化的，一个标签这次是在表格中的第一行的位置，没准哪天就在第二行或者第三行了。 Regular Expression学好正则表达式，走遍天下都不怕。正则表达式其实就是一个过滤器，如果你给我的字符串符合我写的规则，那么我就返回它。 让我们来看看用正则表达式来表示邮箱地址： [A-Za-z0-9\._+]+@[A-Za-z]+\.(com|org|edu|net) 让我们把它分解开来看： [A-Za-z0-9\._+]+ : 这个表达式把所有可能的序列和符号放在中括号（而不是小括号）里面，表示“括号中的符号里任何一个”。另外注意，后面的加号表示“这些符号都可以出现多次，而且至少出现一次”。 @：这个符号很直接，出现在中间位置，有且仅有一次。 [A-Za-z]+ ：可能出现在域名的前半部分、符号 @后面用字母。而且，至少有一个字母。 . : 域名前必须有一个点号。 (com|org|edu|net) : 顶级域名可能有很多种，但是作为参考，这是个后缀够用了。 Correct errors in printing： P17: 例如，tr 标签是 tabel 标签的子标签，而…… 需要更正为： 例如，tr 标签是 table 标签的子标签，而…… Practice: 暂无]]></content>
      <categories>
        <category>Web Scraping</category>
        <category>Book:「Web Scraping with Python」</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Web Scraping</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[♞「NLP with Python」 Chapter 3]]></title>
    <url>%2F2015%2F09%2F17%2F%3CNatural%20Language%20Processing%20with%20Python%3E%20Chapter%203%2F</url>
    <content type="text"><![CDATA[关于该书的其他学习笔记系列：「NLP with Python」 Related The NLP Pipeline Basic Operations with Strings Regular Expressions for Detecting Word Patterns Finding Word Stems Searching Tokenized Text Normalizing Text Word Segmentation Formatting: From Lists to Strings Key:The NLP PipelineNLP 的处理流程：我们打开一个 URL 代码读取里面 HTML 格式的内容，去除标记，并选择字符的切片，然后分词，是否转换为 nltk.Text 对象是可选择的。我们也可以将所有词汇小写并提取成词汇表（Vocab）。 Basic Operations with Strings有时候字符串跨好几行。Python 提供了多种方式表示它们。在下面的例子中，一个包含两个字符串的序列被连接为一个字符串。我们需要使用 反斜杠 或者 括号，这样解释器就知道第一行的表达式不完整了。 12345678&gt;&gt;&gt; couplet = &quot;Shall I compare thee to a Summer&apos;s day?&quot;\... &quot;Thou are more lovely and more temperate:&quot;&gt;&gt;&gt; print coupletShall I compare thee to a Summer&apos;s day?Thou are more lovely and more temperate:&gt;&gt;&gt; couplet = (&quot;Rough winds do shake the darling buds of May,&quot;... &quot;And Summer&apos;s lease hath all too short a date:&quot;)&gt;&gt;&gt; print coupletRough winds do shake the darling buds of May,And Summer&apos;s lease hath all too short a date: 不幸的是，这些方法并没有展现给我们十四行诗中两行之间的换行。为此，我们可以使用如下所示的三重引号的字符串。 12345678910&gt;&gt;&gt; couplet = &quot;&quot;&quot;Shall I compare thee to a Summer&apos;s day?... Thou are more lovely and more temperate:&quot;&quot;&quot;&gt;&gt;&gt; print coupletShall I compare thee to a Summer&apos;s day?Thou are more lovely and more temperate:&gt;&gt;&gt; couplet = &apos;&apos;&apos;Rough winds do shake the darling buds of May,... And Summer&apos;s lease hath all too short a date:&apos;&apos;&apos;&gt;&gt;&gt; print coupletRough winds do shake the darling buds of May,And Summer&apos;s lease hath all too short a date: Regular Expressions for Detecting Word Patterns正则表达式基本元字符，其中包括通配符、范围和闭包： Operator Behavior . Wildcard, matches any character ^abc Matches some pattern abc at the start of a string abc$ Matches some pattern abc at the end of a string [abc] Matches one of a set of characters [A-Z0-9] Matches one of a range of characters ed/ing/s Matches one of the specified strings (disjunction) * Zero or more of previous item, e.g.,a,[a-z](also known as Kleene Closure) + One or more of previous item, e.g.,a+,[a-z]+ ? Zero or one of the previous item (i.e., optional), e.g.,a?,[a-z]? {n} Exactly n repeats where n is a non-negative integer {n,} At least n repeats {,n} No more than n repeats {m,n} At least m and no more than n repeats a(b/c)+ Parentheses that indicate the scope of the operators 正则表达式是用来指定模式的一种强大而灵活的方法。只要导入了 re 模块，就可以使用 re.findall() 找到一个字符串中匹配一个模式的所有子字符串。 如果正则表达式字符串包含反斜杠，应该使用原始字符串与 r 前缀：r&#39;regexp&#39;，告诉 Python 不要预处理这个字符串。 Finding Word Stems书中提到的，抽出一个词的词干的方法，是直接去掉任何看起来像后缀的字符。听起来很棒，但是仍然存在一个问题。比如这个词 processes：12&gt;&gt;&gt; re.findall(r'^(.*)(ing|ly|ed|ious|ies|ive|es|s|ment)$', 'processes')[('processe', 's')] 正则表达式错误的找到了后缀 ‘-s’，而不是后缀 ‘-es’。这表明另一个微妙之处：* 操作符是“贪婪的”，所以表达式的 .* 部分试图尽可能多地匹配输入的字符串。如果使用“非贪婪”版本的 * 操作符，写成 *? 操作符，就得到想要的结果。12&gt;&gt;&gt; re.findall(r'^(.*?)(ing|ly|ed|ious|ies|ive|es|s|ment)$', 'processes')[('process', 'es')] 还可以通过将第二个括号中的内容变成可选来得到空后缀。12&gt;&gt;&gt; re.findall(r'^(.*?)(ing|ly|ed|ious|ies|ive|es|s|ment)$', 'language')[('language', '')] （虽然以上方法还有许多问题…） Searching Tokenized Text可以使用一种特殊的正则表达式搜索一个文本中多个词。例如，在大型文本语料库中搜索 ‘x and other ys’ 形式的表达式来发现上位词。12345678&gt;&gt;&gt; from nltk.corpus import brown&gt;&gt;&gt; hobbies_learned = nltk.Text(brown.words(categories=['hobbies', 'learned']))&gt;&gt;&gt; hobbies_learned.findall(r"&lt;\w*&gt; &lt;and&gt; &lt;other&gt; &lt;\w*s&gt;")speed and other activities; water and other liquids; tomb and otherlandmarks; Statues and other monuments; pearls and other jewels;charts and other items; roads and other features; figures and otherobjects; military and other areas; demands and other factors;abstracts and other compilations; iron and other metals Normalizing TextStemmers词干提取器。NLTK 中包括了一些现成的词干提取器，如果需要使用词干提取器，应该优先使用它们中的一个，而不是使用正则表达式制作自己的词干提取器，因为 NLTK 中的词干提取器能处理的不规则情况很广泛。Porter 和 Lancaster 词干提取器按照它们自己的规则剥离词缀。下面的例子表明 Porter 词干提取器正确处理了词 lying（将它映射为 lie），而 Lancaster 词干提取器并没有处理好。123456789101112&gt;&gt;&gt; porter = nltk.PorterStemmer()&gt;&gt;&gt; lancaster = nltk.LancasterStemmer()&gt;&gt;&gt; [porter.stem(t) for t in tokens]['DENNI', ':', 'Listen', ',', 'strang', 'women', 'lie', 'in', 'pond','distribut', 'sword', 'is', 'no', 'basi', 'for', 'a', 'system', 'of', 'govern','.', 'Suprem', 'execut', 'power', 'deriv', 'from', 'a', 'mandat', 'from','the', 'mass', ',', 'not', 'from', 'some', 'farcic', 'aquat', 'ceremoni', '.']&gt;&gt;&gt; [lancaster.stem(t) for t in tokens]['den', ':', 'list', ',', 'strange', 'wom', 'lying', 'in', 'pond', 'distribut','sword', 'is', 'no', 'bas', 'for', 'a', 'system', 'of', 'govern', '.', 'suprem','execut', 'pow', 'der', 'from', 'a', 'mand', 'from', 'the', 'mass', ',', 'not','from', 'som', 'farc', 'aqu', 'ceremony', '.'] 词干提取过程没有明确定义，通常选择最合适应用的词干提取器。书本上的例子不错，使用词干提取器索引文本：1234567891011121314151617class IndexedText(object): def __init__(self, stemmer, text): self._text = text self._stemmer = stemmer self._index = nltk.Index((self._stem(word), i) for (i, word) in enumerate(text)) def concordance(self, word, width=40): key = self._stem(word) wc = width/4 # words of context for i in self._index[key]: lcontext = ''.join(self._text[i-wc:i]) rcontext = ' '.join(self._text[i:i+wc]) ldisplay = '%*s' % (width, lcontext[-width:]) rdisplay = '%-*s' % (width, rcontext[:width]) print ldisplay, rdisplay def _stem(self, word): return self._stemmer.stem(word).lower() 123456789101112&gt;&gt;&gt; porter = nltk.PorterStemmer()&gt;&gt;&gt; grail = nltk.corpus.webtext.words(&apos;grail.txt&apos;)&gt;&gt;&gt; text = IndexedText(porter, grail)&gt;&gt;&gt; text.concordance(&apos;lie&apos;)r king ! DENNIS : Listen , strange women lying in ponds distributing swords is no beat a very brave retreat . ROBIN : All lies ! MINSTREL : [singing] Bravest of Nay . Nay . Come . Come . You may lie here . Oh , but you are wounded !doctors immediately ! No , no , please ! Lie down . [clap clap] PIGLET : Wellere is much danger , for beyond the cave lies the Gorge of Eternal Peril , which you . Oh ... TIM : To the north there lies a cave -- the cave of Caerbannog --h it and lived ! Bones of full fifty men lie strewn about its lair . So , brave knot stop our fight &apos; til each one of you lies dead , and the Holy Grail returns t Formatting: From Lists to Stringsfrom Lists to Strings从链表到字符串。用于文本处理最简单的结构化对象是词链表。当需要把这些输出到显示器或者文件中时，必须把这些词的链表转换成字符串。在 Python 中，使用 join() 方法，并制定作为“胶水”使用的字符串。1234567&gt;&gt;&gt; silly = ['We', 'called', 'him', 'Tortoise', 'because', 'he', 'taught', 'us', '.']&gt;&gt;&gt; ''.join(silly)'We called him Tortoise because he taught us .'&gt;&gt;&gt; ';'.join(silly)'We;called;him;Tortoise;because;he;taught;us;.'&gt;&gt;&gt; ''.join(silly)'WecalledhimTortoisebecausehetaughtus.' 书本提到了 间接地提供占位符的值。例子： 12345678&gt;&gt;&gt; template = 'Lee wants a %s right now'&gt;&gt;&gt; menu = ['sandwich', 'spam fritter', 'pancake']&gt;&gt;&gt; for snack in menu:... print template % snack...Lee wants a sandwich right nowLee wants a spam fritter right nowLee wants a pancake right now Need to Know:在 Python 2.x 当中是可以使用：1from urllib import urlopen 如果使用的是 Python 3.x 的话，需要更改为：1from urllib.request import urlopen 在「处理 HTML」的模块中： 书本提到从 HTML 中提取文本，采用辅助函数 nltk.clean_html() 将 HTML 字符串作为参数，返回原始文本。 然而，现在这个辅助函数已不支持。为了实现这一目的，我们可以下载Beautiful Soup 4。1$ pip install beautifulsoup4 随后在代码部分中，调用 BeautifulSoup：123456789import nltk, re, pprintfrom urllib.request import urlopenfrom bs4 import *url = "http://youraddress"html = urlopen(url).read()soup = BeautifulSoup(html)raw = soup.get_text()tokens = nltk.word_tokenize(raw) 在「分词」的模块中： Now the segmentation task becomes a search problem: find the bit string that causes the text string to be correctly segmented into words.现在分词的任务变成一个搜索问题：找到能将文本字符串正确地分割成词汇的字位串。 We assume the learner is acquiring words and storing them in an internal lexicon. Given a suitable lexicon, it is possible to reconstruct the source text as a sequence of lexical items. 假定学习者接受字词，并将它们存储在一个内部的词典当中。给定一个合适的词典，我们是能够使用词典中的词的序列来进行重构文本的。 Following (Brent &amp; Cart- wright, 1995), we can define an objective function, a scoring function whose value we will try to optimize, based on the size of the lexicon and the amount of information needed to reconstruct the source text from the lexicon.为了衡量我们这个词典的优劣，这里我们需要定义一个目标函数（Brent &amp; Cart-wright 在 1995 提出的方法），即一个打分函数，依据两个因素，第一个因素是词典的大小，第二个是使用词典来重构原文本所需的信息量。 计算目标函数：给定一个假设的源文本的分词（左），推导出一个词典和推导表，它能让源文本重构，然后合计每个词项（包括边界标志）与推导表的字符数，作为分词质量的得分；得分值越小表明分词越好。 用代码来实现这个目标函数，计算存储词典和重构源文本的成本：12345def evaluate(text, segs): words = segment(text, segs) text_size = len(words) lexicon_size = len(''.join(list(set(words)))) return text_size + lexicon_size 12345678910111213&gt;&gt;&gt; text = "doyouseethekittyseethedoggydoyoulikethekittylikethedoggy"&gt;&gt;&gt; seg1 = "0000000000000001000000000010000000000000000100000000000"&gt;&gt;&gt; seg2 = "0100100100100001001001000010100100010010000100010010000"&gt;&gt;&gt; seg3 = "0000100100000011001000000110000100010000001100010000001"&gt;&gt;&gt; segment(text, seg3)['doyou', 'see', 'thekitt', 'y', 'see', 'thedogg', 'y', 'doyou', 'like', 'thekitt', 'y', 'like', 'thedogg', 'y']&gt;&gt;&gt; evaluate(text, seg3)46&gt;&gt;&gt; evaluate(text, seg2)47&gt;&gt;&gt; evaluate(text, seg1)63 Simulated Annealing(SA)模拟退火算法 。在提到模拟退火算法之前，我来先介绍一下 爬山算法（Hill Climbing）。爬山算法是一种简单的贪心搜索算法，该算法每次从当前的临近解空间中选择一个最优解作为当前解，直到达到一个局部最优解。爬山算法实现很简单，其主要的缺点就是会陷入局部最优解而不一定能搜索到全局最优解。如图所示，假设 C 点为当前解，爬山算法搜索到 A 点这个局部最优解就会停止搜索，因为 A 点无论向哪个方向小幅度移动都不能得到更优的解。 爬山算法是完完全全的贪心算法，每一次都是鼠目寸光地选择一个当前最优解，因此只能搜索到局部的最有值。模拟退火其实也是一种贪心算法，但是它的搜索过程引入了随机因素。模拟退火算法 以一定的概率 来接受一个比当前解要差的解，因此 有可能 会跳出这个局部的最优解，达到全局的最优解。如上图为例，模拟退火算法在搜索到局部最优解 A 后，会以 一定的概率 接受向 E 的移动。也许经过几次这样的不是局部最优的移动后会到达 D 点，于是就跳出了局部最大值 A。模拟退火算法描述： 若 $ J(Y(i+1)) \geqslant J(Y(i)) $ (即移动后得到更优解)，则总是接受该移动 若 $ J(Y(i+1)) &lt; J(Y(i)) $ (即移动后的解比当前解要差)，则以一定的概率接受移动，而且这个概率随着时间推移逐渐降低（逐渐降低才能趋向稳定） 这里的“一定的概率”的计算参考了金属冶炼的退火过程，这也是模拟退火算法名称的由来。 根据热力学的原理，在温度为 T 时，出现能量差为 dE 的降温的概率为P(dE)，表示为： P(\mathrm{d} E) = exp(\mathrm{d}E/kT)其中 k 是一个常数，exp表示自然指数，且 dE&lt;0。这条公式说白了就是：温度越高，出现一次能量差为dE 的降温的概率就越大；温度越低，则出现降温的概率就越小。又由于 dE 总是小于 0（否则就不叫退火了），因此 dE/kT &lt; 0，所以P(dE) 的函数取值范围是(0,1) 。 随着温度 T 的降低，P(dE)会逐渐降低。 我们将一次向较差解的移动看做一次温度跳变过程，我们以概率 P(dE) 来接受这样的移动。 关于爬山算法与模拟退火，有一个有趣的比喻： 爬山算法：兔子朝着比现在高的地方跳去。它找到了不远处的最高山峰。但是这座山不一定是珠穆朗玛峰。这就是爬山算法，它不能保证局部最优值就是全局最优值。 模拟退火：兔子喝醉了。它随机地跳了很长时间。这期间，它可能走向高处，也可能踏入平地。但是，它渐渐清醒了并朝最高方向跳去。这就是模拟退火。 接着，让我们使用带有模拟退火算法思想的非确定性搜索，来确定构建分词最好的词典： 一开始仅搜索短语分词； 随机扰动 0 和 1，它们与“温度”成一定比例； 每次迭代温度都会降低，扰动边界会减少。 1234567891011121314151617181920212223242526from random import randint#flip()函数，随机扰动 0 和 1def flip(segs, pos): return segs[:pos] + str(1-int(segs[pos])) + segs[pos+1:]#flip_n()函数，n 为迭代次数def flip_n(segs, n): for i in range(n): segs = flip(segs, randint(0,len(segs)-1)) return segsdef anneal(text, segs, iterations, cooling_rate): #cooling_rate“降温”的快慢 temperature = float(len(segs)) # 初始温度 while temperature &gt; 0.5: # 每一次“降温”的结果，若由于前一次，则会更改 segs 的值并进行下一次“降温” best_segs, best = segs, evaluate(text, segs) for i in range(iterations): guess = flip_n(segs, int(round(temperature))) score = evaluate(text, guess) if score &lt; best: best, best_segs = score, guess score, segs = best, best_segs temperature = temperature / cooling_rate print evaluate(text, segs), segment(text, segs) print return segs 1234567891011&gt;&gt;&gt; text = "doyouseethekittyseethedoggydoyoulikethekittylikethedoggy"&gt;&gt;&gt; seg1 = "0000000000000001000000000010000000000000000100000000000"&gt;&gt;&gt; anneal(text, seg1, 5000, 1.2)60 ['doyouseetheki', 'tty', 'see', 'thedoggy', 'doyouliketh', 'ekittylike', 'thedoggy']58 ['doy', 'ouseetheki', 'ttysee', 'thedoggy', 'doy', 'o', 'ulikethekittylike', 'thedoggy']56 ['doyou', 'seetheki', 'ttysee', 'thedoggy', 'doyou', 'liketh', 'ekittylike', 'thedoggy']54 ['doyou', 'seethekit', 'tysee', 'thedoggy', 'doyou', 'likethekittylike', 'thedoggy']53 ['doyou', 'seethekit', 'tysee', 'thedoggy', 'doyou', 'like', 'thekitty', 'like', 'thedoggy']51 ['doyou', 'seethekittysee', 'thedoggy', 'doyou', 'like', 'thekitty', 'like', 'thedoggy']42 ['doyou', 'see', 'thekitty', 'see', 'thedoggy', 'doyou', 'like', 'thekitty', 'like', 'thedoggy']'0000100100000001001000000010000100010000000100010000000' 有了足够的数据，就可能以一个较为合理的准确度自动将文本分割成词汇。 这种方法可用于那些词的边界没有任何视觉表示的书写系统分词。 Correct errors in printing: 暂无 Practice: 5.○ What happens if you ask the interpreter to evaluate monty[::-1]? Explain why this is a reasonable result. 逆序输出。 123&gt;&gt;&gt; a='python'&gt;&gt;&gt; a[::-1]'nohtyp' 6.○ Describe the class of strings matched by the following regular expressions: [a-zA-Z]+ [A-Z][a-z]* p[aeiou]{,2}t \d+(\.\d+)? ([^aeiou][aeiou][^aeiou]) \w+|[^\w\s]+ Test your answers using nltk.re_show(). 字母字符串 开头大写后小写字母不限（小写字母可有可没有） p 开头 t 结尾，中间有少于 2 个的元音字母 整数或者带小数的整数（整数与浮点数） （（非元音）（元音）（非元音））（可有可没有） 例如’pot’ 要么是字母一个或多个，要么不是字母、空格一个或多个 7.○ Write regular expressions to match the following classes of strings: A single determiner (assume that a, an, and the are the only determiners) An arithmetic expression using integers, addition, and multiplication, such as 2*3+8 121. &gt;&gt;&gt; nltk.re_show('an?|the', 'thesisiaishihsthean', left='&#123;', right='&#125;')2. &gt;&gt;&gt; nltk.re_show('\d+\*\d+\+\d+', '2*3+8', left='&#123;', right='&#125;') 9.○ Save some text into a file corpus.txt. Define a function load(f) that reads from the file named in its sole argument, and returns a string containing the text of the file. Use nltk.regexp_tokenize()to create a tokenizer that tokenizes the various kinds of punctuation in this text. Use one multiline regular expression inline comments, using the verbose flag(?x). Use nltk.regexp_tokenize() to create a tokenizer that tokenizes the following kinds of expressions: monetary amounts; dates; names of people and organizations. 1234567891011121. &gt;&gt;&gt; pattern = r'''(?x) ... [][.,;"'?()=-_`] ... ''' &gt;&gt;&gt; nltk.regexp_tokenize(text, pattern)2. &gt;&gt;&gt; pattern = r'''(?x) ... ([A-Z]\.)+ # eg. U.S.A ... |([A-Z][a-z]*\s[A-Z][a-z]*) # words with optional internal ... |\$?\d+(\.\d+)?% # currency and percentages eg. $12.40, 82% ... |\d+-\d+-\d+ ... ''' &gt;&gt;&gt; nltk.regexp_tokenize(text, pattern) 20.◑ Write code to access a favorite web page and extract some text from it. For example, access a weather site and extract the forecast top temperature for your town or city today. 1234567891011def test20(): # search weather url = 'http://en.weather.com.cn/weather/101220101.shtml' html = urlopen(url).read() soup = BeautifulSoup(html, "lxml") raw = soup.get_text() tokens = nltk.word_tokenize(raw) text = nltk.Text(tokens) print(text) print print(text.concordance('Hefei')) 21.◑ Write a function unknown() that takes a URL as its argument, and returns a list of unknown words that occur on that web page. In order to do this, extract all substrings consisting of lowercase letters (using re.findall()) and remove any items from this set that occur in the Words Corpus (nltk.corpus.words). Try to categorize these words manually and discuss your findings. 123456789101112131415def test21(): url = "http://www.bbc.co.uk/news/world-middle-east-18650775" wordsres = [] def unknown(url): html = urlopen(url).read() soup = BeautifulSoup(html) raw = soup.get_text() words = re.findall(r'[a-z]+', raw) wordlist = [w for w in nltk.corpus.words.words('en') if w.islower()] for word in words: if word not in wordlist: wordsres.append(word) return wordsres wordsres = unknown(url) print(wordsres) 25.◑ Pig Latin is a simple transformation of English text. Each word of the text is converted as follows: move any consonant (or consonant cluster) that appears at the start of the word to the end, then append ay, e.g., string → ingstray, idle → idleay (see http://en.wikipedia.org/wiki/Pig_Latin). Write a function to convert a word to Pig Latin. Write code that converts text, instead of individual words. Extend it further to preserve capitalization, to keep qu together (so that quiet becomes ietquay, for example), and to detect when y is used as a consonant (e.g., yellow) versus a vowel (e.g., style). 1234567891011121314151617181920212223242526272829303132def test25(): # Pig Latin def pig_latin(word): result = [] if 'qu' in word.lower(): for i in range(len(word)): if word[i] in '[AEIOUaeiou]': pig_word = [word[i+1:], word[:i+1], 'ay'] result = ''.join(pig_word) else: for i in range(len(word)): if word[i] in '[AEIOUaeiou]': pig_word = [word[i:], word[:i], 'ay'] result = ''.join(pig_word) return result def translate(): object = open('text25.txt') try: text = object.read() finally: object.close() words = nltk.word_tokenize(text) result = [] for i in range(len(words)): result.append(pig_latin(words[i])) return result result = translate() print(result) print(pig_latin('quiet')) print(pig_latin('string')) 27.◑ Python’s random module includes a function choice() which randomly chooses an item from a sequence; e.g., choice(&quot;aehh &quot;) will produce one of four possible characters, with the letter h being twice as frequent as the others. Write a generator expression that produces a sequence of 500 randomly chosen letters drawn from the string “aehh “, and put this expression inside a call to the &#39;&#39;.join() function, to concatenate them into one long string. You should get a result that looks like uncontrolled sneezing or maniacal laughter: he haha ee heheeh eha. Use split() and join() again to normalize the whitespace in this string. 1234567def test27(): # choice string = [] for i in range(500): string.append(random.choice('hahe')) result = ''.join(string).split() print(result) 29.◑ Readability measures are used to score the reading difficulty of a text, for the purposes of selecting texts of appropriate difficulty for language learners. Let us define $μ_w$ to be the average number of letters per word, and $μ_s$ to be the average number of words per sentence, in a given text. The Automated Readability Index (ARI) of the text is defined to be: $4.71 μ_w + 0.5 μ_s - 21.43$. Compute the ARI score for various sections of the Brown Corpus, including section f (popular lore) and j (learned). Make use of the fact that nltk.corpus.brown.words() produces a se- quence of words, whereas nltk.corpus.brown.sents() produces a sequence of sentences. 1234567891011121314151617181920def test29(): words1 = [len(word) for word in nltk.corpus.brown.words(categories = 'lore')] sents1 = [len(sent) for sent in nltk.corpus.brown.sents(categories = 'lore')] words2 = [len(word) for word in nltk.corpus.brown.words(categories = 'learned')] sents2 = [len(sent) for sent in nltk.corpus.brown.sents(categories = 'learned')] wordsum = 0 sentsum = 0 for wlength in words1 : wordsum += int(wlength) for slength in sents1 : sentsum += slength def ARI(uw,us): return 4.71*uw + 0.5*us - 21.43 uw = wordsum/len(words1) us = sentsum/len(sents1) print(us) print(ARI(uw, us)) 30.◑ Use the Porter Stemmer to normalize some tokenized text, calling the stemmer on each word. Do the same thing with the Lancaster Stemmer, and see if you ob- serve any differences. 12345678def test30(): saying = ['After', 'all', 'is', 'said', 'and', 'done', ',', 'more', 'is', 'said', 'than', 'done', '.'] porter = nltk.PorterStemmer() lancaster = nltk.LancasterStemmer() result_porter = [porter.stem(t) for t in saying] result_lancaster = [lancaster.stem(t) for t in saying] print(result_porter) print(result_lancaster) 32.◑ Define a variable silly to contain the string: ‘newly formed bland ideas are inexpressible in an infuriating way’. (This happens to be the legitimate inter- pretation that bilingual English-Spanish speakers can assign to Chomsky’s famous nonsense phrase colorless green ideas sleep furiously, according to Wikipedia). Now write code to perform the following tasks: Split silly into a list of strings, one per word, using Python’s split() opera- tion, and save this to a variable called bland. Extract the second letter of each word in silly and join them into a string, to get ‘eoldrnnnna’. 12345678def test32(): silly='newly formed bland ideas are inexpressible in an infuriating way' bland = silly.split() print(bland) result = '' for i in range(len(bland)): result = result + bland[i][1] print(result,type(result)) 35.◑ Read the LanguageLog post on phrases of the form as best as p can and as best p can, where p is a pronoun. Investigate this phenomenon with the help of a corpus and the findall() method for searching tokenized text described in Section 3.5. The post is at http://itre.cis.upenn.edu/~myl/languagelog/archives/002733.html. 1234567def test35(): # 为什么我的 brown.words()中没有 as best as p can 以及 as best p can 的形式？ text = nltk.Text(brown.words()) print(text) print(text.findall(r'&lt;as&gt; &lt;\w*&gt; &lt;as&gt;')) print print(text.findall(r'&lt;\w*&gt; &lt;and&gt; &lt;other&gt; &lt;\w*s&gt;')) 37.◑ Read about the re.sub() function for string substitution using regular expres- sions, using help(re.sub) and by consulting the further readings for this chapter. Use re.sub in writing code to remove HTML tags from an HTML file, and to normalize whitespace. 1234567891011121314def test37(): object = open('Language Log: Asbestos she can.html') try: text = object.read() pattern = '''(?x)&lt;html&gt;|&lt;/html&gt;''' text = re.sub(pattern, '', text) object_copy = open('text36.txt', 'w+') try: object_copy.write(text) finally: object_copy.close() finally: object.close()]]></content>
      <categories>
        <category>NLP</category>
        <category>Book:「NLP with Python」</category>
      </categories>
      <tags>
        <tag>NLP</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[♞「NLP with Python」 Chapter 1 & 2]]></title>
    <url>%2F2015%2F09%2F11%2F%3CNatural%20Language%20Processing%20with%20Python%3E%20Chapter%201%20%26%202%2F</url>
    <content type="text"><![CDATA[关于该书的其他学习笔记系列：「NLP with Python」 Related NLTK concordance() function Word Sense Disambiguation &amp; Pronoun Resolution Text Corpus Structure WordNet Key:What’s NTLK?NTLK 是一个自然语言工具包，最初创建于 2001 年，最初是宾州大学计算机与信息科学系计算语言学课程的一部分，大部分 NLP 研究者入门的首选 tool。 另外，这本书是关于用 Python 进行自然语言处理的一本入门书，基本上可以看做是 NLTK 这个库的 HandBook，使用的方法均是 nltk 库中的方法。如果希望查阅 API 文档或者是下载安装 NLTK，可以前往 官方网站 下载，官网上提供和的 API 文档涵盖了工具包中的每一个模块、类和函数，详细说明了各种参数，以及用法示例，在此不再赘述。 简单介绍一下 NLTK 的几个重要的模块以及功能描述： 语言处理任务 NLTK 模块 功能描述 获取语料库 nltk.corpus 语料库和字典的标准化接口 字符串处理 nltk.tokenize, nltk.stem 分词、句子分解、提取主干 搭配探究 nltk.collocations t- 检验、卡方、点互信息 词性标识符 nltk.tag n-gram、backoff、Brill、HMM、TnT 分类 nltk.classify，nltk.cluster 决策树、最大熵、朴素贝叶斯、EM、k-means 分块 nltk.chunk 正则表达式、n-gram、命名实体 解析 nltk.parse 图表、基于特征、一致性、概率性、依赖项 语义解释 nltk.sem，nltk.inference ℷ 演算、一阶逻辑、模型检验 指标评测 nltk.metrice 精度、召回率、协议系数 概率与估计 nltk.probability 频率分布、平滑概率分布 应用 nltk.app，nltk.chat 图形化的关键词排序、分析器、WordNet 查看器、聊天机器人 语言学领域的工作 nltk.toolbox 处理 SIL 数据格式的工具箱 concordance function concordance() 函数：这个函数挺有意思的，是 nltk 下的一个函数，可以显示指定单词的出现情况（使用这个函数，指定单词的大小写不敏感），同时还可以显示一些上下文。下面是该函数的使用场景（其中 text1 的内容是 nltk.book 导入后中的 text1）: 123456789101112&gt;&gt;&gt; text1.concordance(&quot;monstrous&quot;) Building index... Displaying 11 of 11 matches: ong the former , one was of a most monstrous size . ... This came towards us , ON OF THE PSALMS . &quot; Touching that monstrous bulk of the whale or ork we have r ll over with a heathenish array of monstrous clubs and spears . Some were thick d as you gazed , and wondered what monstrous cannibal and savage could ever hav that has survived the flood ; most monstrous and most mountainous ! That Himmal they might scout at Moby Dick as a monstrous fable , or still worse and more de th of Radney .&apos;&quot; CHAPTER 55 Of the monstrous Pictures of Whales . I shall ere l ing Scenes . In connexion with the monstrous pictures of whales , I am strongly ere to enter upon those still more monstrous stories of them which are to be fo 这个函数的具体实现如下： 12345678910111213def concordance(self, word, width=79, lines=25): """ Print a concordance for ``word`` with the specified context window. Word matching is not case-sensitive. :seealso: ``ConcordanceIndex``""" if '_concordance_index' not in self.__dict__: print("Building index...") self._concordance_index = ConcordanceIndex(self.tokens, key=lambda s:s.lower()) self._concordance_index.print_concordance(word, width, lines) Word Sense Disambiguation &amp; Pronoun Resolution Word Sense Disambiguation 词义消歧，简而言之，我们需要做的就是分析出特定上下文中的词被赋予的是哪个意思。例如： a. serve: help with food or drink; hold an office; put ball into play b. dish: plate; course of a meal; communications device Pronoun Resolution 指代消解，是解决“词义消歧”的一个手段，解决“谁对谁做了什么”，即检测动词的主语和宾语，另外还有 语义角色标注（semantic role labing）— 确定名词短语如何与动词相关联（如代理、受事、工具等）。 Text Corpus Structure以下是几种常见的语料库结构： 最简单的一种语料库是一些孤立的没有什么特别结构的文本集合； 一些语料库按如文体（布朗语料库）等分类成组织结构； 一些分类会重叠，如主题类别（路透社语料库）； 另外一些语料库可以表示随时间变化，语言用法的改变（就职演说语料库）； WordNet Senses and Synonyms.（意义与同义词） Synonyms and Synset.（同义词集与词条） The WordNet Hierarchy.（WordNet 的层次结构） WordNet synsets correspond to abstract concepts, and they don’t always have corre- sponding words in English. These concepts are linked together in a hierarchy. Some concepts are very general, such as Entity, State, Event; these are called unique begin- ners or root synsets. Others, such as gas guzzler and hatchback, are much more specific. WordNet 概念的层次片段：每个节点对应一个同义词集；边表示上位词 / 下位词关系，即上级概念与从属概念的关系。 Hyponyms and Hypernyms.（下位词与上位词） Antonyms.（反义词） Correct errors in printing: P19: 在 「Your Trun」 的那块内容中： 使用 text2 尝试前面频率分布的例子。…如果得到的是错误信息：NameError: name ‘FreqDist’is not defined，则需要在一开始输入 from nltk.book import *。 需更正为： 使用 text2 尝试前面频率分布的例子。…如果得到的是错误信息：NameError: name ‘FreqDist’is not defined，则需要在一开始输入 from nltk import *。 原因：nltk.book 中并不存在 FreqDist() 这一 function. P48: 在 「Inaugural Address Corpus」 的那块代码部分中：123&gt;&gt;&gt; cfd = nltk.ConditionalFreqDist(... (target, file[:4])... for fileid in inaugural.fileids() 需更正为： 123&gt;&gt;&gt; cfd = nltk.ConditionalFreqDist(... (target, fileid[:4])... for fileid in inaugural.fileids() Practice: 6.○ In the discussion of comparative wordlists, we created an object called translate, which you could look up using words in both German and Italian in order to get corresponding words in English. What problem might arise with this approach? Can you suggest a way to avoid this problem? 如果输入错误（不存在的词语或者其他没有通过 translate.update(dict(xx)) 加入字典的语言词语，则会引发 KeyError）。其中一个解决办法是，添加一个错误处理情况。 8.◑ Define a conditional frequency distribution over the Names Corpus that allows you to see which initial letters are more frequent for males versus females (see Figure 2-7). 1234&gt;&gt;&gt; cfd = nltk.ConditionalFreqDist(... (fileid, name[1]... for fileid in names.fileids()... for name in names.words(fileid)) 14.◑ Define a function supergloss(s) that takes a synset s as its argument and returns a string consisting of the concatenation of the definition of s, and the definitions of all the hypernyms and hyponyms of s. 12345def supergloss(s): s = wn.synset('s') hyponyms_of_s = s.hyponyms() hypernyms_of_s = s.hypernyms() return str(s) + str(hyponyms_of_s) + str(hypernyms_of_s) 17.◑ Write a function that finds the 50 most frequently occurring words of a text that are not stopwords. 123456def most_fifty_words(text): stopwords = nltk.corpus.stopwords.words('english') content = [w for w in text if w.lower() not in stopwords] fdist = FreqDist(content) vocabulary = list(fdist.keys()) return vocabulary[:50]]]></content>
      <categories>
        <category>NLP</category>
        <category>Book:「NLP with Python」</category>
      </categories>
      <tags>
        <tag>NLP</tag>
        <tag>Python</tag>
      </tags>
  </entry>
</search>